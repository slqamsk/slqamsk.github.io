Содержимое файла about.html:
--------------------------------------------------
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>О нас - Мой сайт</title>
  <script src="layout.js" defer></script>
</head>
<body>
  <my-layout>
    <h2>О нашей компании</h2>
    
    <p>Мы - ведущая компания в сфере технологий и инноваций, работающая на рынке более 15 лет.</p>
    
    <h3>Наша история</h3>
    <p>Основанная в 2010 году, наша компания начинала с небольшого офиса и команды из 5 человек. Сегодня мы насчитываем более 500 сотрудников в 10 странах мира.</p>
    <p>Наш путь был наполнен как успехами, так и трудностями, но каждый вызов делал нас сильнее. В 2015 году мы запустили первую линейку продуктов, которая принесла нам признание на международном рынке.</p>
    
    <h3>Наши ценности</h3>
    <p>В основе нашей работы лежат три ключевых принципа:</p>
    <ul>
      <li>Инновации - мы постоянно ищем новые решения</li>
      <li>Качество - наши продукты проходят строгий контроль</li>
      <li>Клиентоориентированность - удовлетворенность клиентов наш главный приоритет</li>
    </ul>
    
    <h3>Наши услуги</h3>
    <p>Мы предлагаем широкий спектр услуг для бизнеса и частных клиентов:</p>
    
    <h4>Разработка программного обеспечения</h4>
    <p>Наша команда разработчиков создает решения, которые помогают бизнесу расти и развиваться. Мы используем современные технологии и методологии.</p>
    <p>Каждый проект проходит несколько этапов контроля качества, что гарантирует надежность конечного продукта. Наши клиенты получают не просто программное обеспечение, а инструмент для решения их бизнес-задач.</p>
    
    <h4>Консалтинговые услуги</h4>
    <p>Наши эксперты помогут вам разобраться в сложных технологических вопросах и найти оптимальные решения для вашего бизнеса.</p>
    <p>Мы проводим глубокий анализ текущей ситуации, выявляем узкие места и предлагаем конкретные шаги по улучшению. Наши рекомендации основаны на реальном опыте и проверенных методиках.</p>
    
    <h4>Техническая поддержка</h4>
    <p>Круглосуточная поддержка клиентов - наш конек. Мы гордимся быстрым временем реакции и высоким процентом решения вопросов с первого обращения.</p>
    <p>Наша служба поддержки работает 24/7, без выходных и праздников. Каждый клиент получает персонального менеджера, который сопровождает его на всех этапах работы с нашими продуктами.</p>
    
    <h3>Наша команда</h3>
    <p>Мы собрали лучших специалистов в своих областях. Средний стаж работы наших сотрудников в компании - 5 лет, что говорит о стабильности и комфортных условиях труда.</p>
    <p>Каждый год мы инвестируем в обучение и развитие наших сотрудников, отправляя их на международные конференции и тренинги. Мы верим, что развитие команды - это залог развития компании.</p>
    
    <h3>Наши достижения</h3>
    <p>За годы работы мы получили множество наград и признаний:</p>
    <ul>
      <li>Лучший технологический стартап 2015 года</li>
      <li>Премия "Инновации в бизнесе" 2018</li>
      <li>Топ-10 работодателей IT-сферы 2020-2024</li>
      <li>Сертификат ISO 9001:2020</li>
    </ul>
    
    <h3>Наши партнеры</h3>
    <p>Мы сотрудничаем с ведущими компаниями мира, включая Microsoft, Google и Amazon. Эти партнерства позволяют нам предлагать клиентам решения мирового уровня.</p>
    <p>Каждое партнерство - это результат долгой и кропотливой работы. Мы тщательно выбираем, с кем сотрудничать, чтобы гарантировать нашим клиентам только лучшие решения.</p>
    
    <h3>Планы на будущее</h3>
    <p>В ближайшие 5 лет мы планируем:</p>
    <ul>
      <li>Расширить географию присутствия до 20 стран</li>
      <li>Удвоить штат сотрудников</li>
      <li>Запустить 3 новых продукта</li>
      <li>Открыть собственный исследовательский центр</li>
    </ul>
    
    <h3>Отзывы клиентов</h3>
    <p>"Работа с этой компанией изменила наш бизнес. Благодаря их решениям мы смогли увеличить оборот в 3 раза за год." - Иван Петров, генеральный директор ООО "ТехноПром"</p>
    <p>"Лучший сервис, с которым я когда-либо работал. Быстрое решение любых вопросов и индивидуальный подход." - Мария Сидорова, IT-директор "БанкФинанс"</p>
    <p>"Мы сотрудничаем уже 7 лет и каждый раз впечатлены профессионализмом команды." - Алексей Иванов, основатель стартапа "Новые технологии"</p>
    
    <h3>Как с нами связаться</h3>
    <p>Вы можете связаться с нами любым удобным способом:</p>
    <ul>
      <li>Телефон: +7 (123) 456-78-90</li>
      <li>Email: info@company.com</li>
      <li>Офис: г. Москва, ул. Технологическая, д. 42</li>
    </ul>
    
    <p>Наши менеджеры работают с 9:00 до 18:00 по московскому времени, но служба поддержки доступна круглосуточно.</p>
    
    <h3>Часто задаваемые вопросы</h3>
    <p><strong>Как стать вашим клиентом?</strong><br>
    Просто свяжитесь с нами любым удобным способом, и мы обсудим ваши потребности.</p>
    
    <p><strong>Какие гарантии вы предоставляете?</strong><br>
    На все работы предоставляется гарантия от 1 года. Конкретные условия зависят от типа услуги.</p>
    
    <p><strong>Есть ли у вас бесплатные консультации?</strong><br>
    Да, первая консультация всегда бесплатна и ни к чему вас не обязывает.</p>
    
    <p><strong>Работаете ли вы с малым бизнесом?</strong><br>
    Да, у нас есть специальные предложения для стартапов и малого бизнеса.</p>
    
    <h3>Еще больше текста для прокрутки</h3>
    <p>Технологический прогресс не стоит на месте, и мы стараемся идти в ногу со временем. Каждый день наши сотрудники работают над тем, чтобы предлагать клиентам самые современные решения.</p>
    <p>Инвестиции в исследования и разработки составляют около 20% от нашего оборота. Мы считаем, что это необходимая плата за лидерство в отрасли.</p>
    <p>Наши офисы оборудованы по последнему слову техники. Мы создаем комфортные условия для работы, потому что верим - счастливые сотрудники создают лучшие продукты.</p>
    <p>Корпоративная культура - это не просто слова для нас. Мы регулярно проводим тимбилдинги, обучающие мероприятия и просто приятные встречи в неформальной обстановке.</p>
    <p>Социальная ответственность - еще один важный аспект нашей работы. Мы поддерживаем несколько образовательных программ и экологических инициатив.</p>
    <p>В 2023 году мы сократили углеродный след нашей деятельности на 30% и планируем достичь нулевых выбросов к 2030 году.</p>
    <p>Разнообразие и инклюзивность - наши приоритеты при найме. Мы гордимся тем, что в нашей команде представлены специалисты из разных стран и культур.</p>
    <p>Гибкий график работы и возможность удаленной работы - стандартные условия для наших сотрудников. Мы ценим результат, а не присутствие в офисе.</p>
    <p>Система наставничества помогает новым сотрудникам быстро влиться в команду. Каждый новичок получает опытного коллегу, который помогает освоиться.</p>
    <p>Ежегодные опросы удовлетворенности сотрудников показывают стабильно высокие результаты - в среднем 4.8 из 5 баллов.</p>
    <p>Мы активно участвуем в технологических конференциях как спикеры и организаторы. Делиться знаниями - часть нашей философии.</p>
    <p>Открытость к новым идеям - то, что позволяет нам оставаться на передовой. Каждый сотрудник может предложить инициативу, которая будет рассмотрена.</p>
    <p>Система поощрений мотивирует команду на достижение высоких результатов. Лучшие сотрудники получают бонусы и возможности для карьерного роста.</p>
    <p>Мы гордимся тем, что многие наши сотрудники работают в компании с самого основания. Их опыт и преданность - наша главная ценность.</p>
    <p>Молодые специалисты получают возможность работать над реальными проектами с первого дня, под руководством опытных коллег.</p>
    <p>Баланс между работой и личной жизнью - важный принцип нашей кадровой политики. Мы поощряем сотрудников заботиться о своем благополучии.</p>
    <p>Технические митапы и хакатоны - регулярные события в нашей компании. Они помогают команде быть в курсе последних тенденций.</p>
    <p>Мы инвестируем в здоровье сотрудников, предлагая комплексные медицинские страховки и программы wellness.</p>
    <p>Офисы компании расположены в удобных местах с хорошей транспортной доступностью. Для сотрудников предусмотрены парковки и велопарковки.</p>
    <p>Зеленые зоны в офисах и зоны отдыха помогают сотрудникам восстанавливаться в течение рабочего дня.</p>
    <p>Мы используем экологичные материалы и практики в повседневной работе, сокращая использование бумаги и пластика.</p>
    <p>Система переработки отходов внедрена во всех офисах компании. Мы стремимся минимизировать наше воздействие на окружающую среду.</p>
    <p>Волонтерские программы позволяют сотрудникам участвовать в социально значимых проектах в рабочее время.</p>
    <p>Образовательные гранты для детей сотрудников - еще одна инициатива, которую мы реализуем уже несколько лет.</p>
    <p>Программы обмена между офисами в разных странах помогают сотрудникам расширять кругозор и профессиональный опыт.</p>
    <p>Мы поддерживаем профессиональные сообщества и open-source проекты, внося свой вклад в развитие технологий.</p>
    <p>Ежегодные корпоративные мероприятия укрепляют командный дух и создают атмосферу единой семьи.</p>
    <p>Программа рекомендаций сотрудников показывает, что более 30% новых работников приходят к нам по совету коллег.</p>
    <p>Мы гордимся нашей репутацией на рынке труда и стремимся поддерживать высокие стандарты работы с персоналом.</p>
    <p>Техническая база компании обновляется регулярно, чтобы сотрудники имели доступ к лучшим инструментам для работы.</p>
    <p>Система обучения включает как внутренние программы, так и внешние курсы от ведущих образовательных платформ.</p>
    <p>Карьерные пути четко определены, и каждый сотрудник понимает, как может расти в компании.</p>
    <p>Регулярные one-to-one встречи с руководителями помогают своевременно решать вопросы и корректировать планы развития.</p>
    <p>Система 360-градусной обратной связи позволяет получать всестороннюю оценку работы и находить точки роста.</p>
    <p>Мы верим, что инвестиции в людей - это инвестиции в будущее компании, и продолжаем развивать наши HR-практики.</p>
  </my-layout>
</body>
</html>

Содержимое файла index.html:
--------------------------------------------------
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Мой сайт - Добро пожаловать!</title>
  <script src="layout.js" defer></script>
</head>
<body>
  <my-layout>
    <h2>Добро пожаловать!</h2>
    <p>Этот контент отображается в основном блоке.</p>
  </my-layout>
</body>
</html>

Содержимое файла layout.css:
--------------------------------------------------
/* styles.css */
:root {
  --primary-bg: #e1f5fe;
  --primary-border: #b3e5fc;
  --hover-color: #01579b;
}

body {
  margin: 0;
  padding: 0;
  font-family: Arial, sans-serif;
  background-color: #f5f5f5;
  height: 100vh;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.layout-page {
  display: flex;
  flex-direction: column;
  height: 100%;
}

.layout-header {
  background: var(--primary-bg);
  padding: 0 1rem;
  display: grid;
  grid-template-columns: auto 1fr auto;
  align-items: center;
  border-bottom: 1px solid var(--primary-border);
  gap: 15px;
  line-height: 1.3;
  flex-shrink: 0;
}

.layout-header > * {
  margin: 0;
}

.header-left {
  justify-self: start;
}

.header-center {
  justify-self: center;
}

.header-right {
  justify-self: end;
  display: flex;
}

.logo {
  font-size: 1.5rem;
  font-weight: bold;
  white-space: nowrap;
}

.layout-header nav a {
  white-space: nowrap;
  margin-left: 15px;
  text-decoration: none;
  color: #000;
  padding: 8px 12px;
  border-radius: 4px;
  font-weight: bold;
  transition: all 0.2s ease;
}

.layout-header nav a:hover {
  background-color: var(--primary-border);
  color: var(--hover-color);
  text-decoration: underline;
}

.layout-content {
  display: flex;
  flex: 1;
  min-height: 0;
  background: #fff;
}

.layout-sidebar {
  overflow-x: hidden; /* Запрещаем горизонтальный скролл */
  overflow-y: auto; /* Разрешаем только вертикальный скролл */
  width: 200px;
  min-width: 50px;
  max-width: 600px;
  background: var(--primary-bg);
  flex-shrink: 0;
  display: flex;
  flex-direction: column;
  transition: transform 0.3s ease, width 0.2s ease;
  position: relative;
  z-index: 2;
  will-change: width; /* Улучшаем производительность анимации */
}

/* Ваша декоративная линия (сохраняем как есть) */
.layout-sidebar::after {
  content: '';
  position: absolute;
  right: 0;
  top: 0;
  bottom: 0;
  width: 1px;
  background-color: var(--primary-border);
  z-index: 2;
}

/* Новый элемент для ресайза (поверх линии) */
.layout-sidebar-resizer {
  position: absolute;
  right: -4px;
  top: 0;
  bottom: 0;
  width: 8px;
  cursor: col-resize;
  z-index: 3; /* Выше чем линия */
  background: transparent;
  transition: background 0.2s;
}

.layout-sidebar-resizing {
  transition: none !important; /* Отключаем анимацию во время ресайза */
}

.layout-sidebar-resizer-active {
  position: absolute;
  right: 0;
  top: 0;
  bottom: 0;
  width: 1px;
  background-color: var(--primary-border);
  z-index: 4;
  pointer-events: none;
}

.layout-sidebar-resizer:hover,
.layout-sidebar-resizer:active {
  background: rgba(0, 0, 0, 0.1);
}

/* Для мобильных */
@media (max-width: 768px) {
  .layout-sidebar-resizer {
    display: none;
  }
}

.layout-sidebar.hidden {
  transform: translateX(-100%);
  width: 0;
}

.sidebar-toggle {
  background: var(--primary-bg);
  border: 1px solid var(--primary-border);
  border-radius: 4px;
  cursor: pointer;
  padding: 5px 10px;
  font-size: 0.9rem;
  transition: background 0.2s ease;
}

.sidebar-toggle:hover {
  background: var(--primary-border);
}

.sidebar-menu {
  padding: 10px;
  flex: 1;
  overflow-y: hidden;
}

.sidebar-menu:hover {
  overflow-y: auto;
}

.sidebar-menu ul {
  list-style: none;
  padding: 0;
  margin: 0;
}

.sidebar-menu li {
  margin-bottom: 5px;
}

.menu-item {
  overflow: hidden; /* Обрезаем длинный текст */
  color: #000;
  text-decoration: none;
  display: block;
  padding: 8px 12px;
  border-radius: 4px;
  font-weight: bold;
  transition: all 0.2s ease;
}

/* Треугольник-стрелка (▼) */
.menu-item[aria-haspopup="true"] {
  position: relative; /* Для псевдоэлемента */
  padding-right: 20px !important; /* Место для стрелки */
}

.menu-item[aria-haspopup="true"]::after {
  content: "";
  position: absolute;
  right: 5px;
  top: 50%;
  transform: translateY(-50%);
  width: 0;
  height: 0;
  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
  border-top: 5px solid currentColor;
  transition: transform 0.2s ease;
}

/* Перевёрнутый треугольник (▲) при открытии */
.menu-group.active > .menu-item::after {
  transform: translateY(-50%) rotate(180deg);
}


.menu-item:hover {
  background-color: var(--primary-border);
  color: var(--hover-color);
  text-decoration: underline;
}

.submenu {
  padding-left: 0;
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease;
}

.submenu.active {
  max-height: 500px;
}

.submenu li a {
  display: block;
  padding: 8px 20px;
  color: #000;
  text-decoration: none;
  border-radius: 4px;
  transition: all 0.2s ease;
}

.submenu li a:hover {
  background-color: var(--primary-border);
  color: var(--hover-color);
  text-decoration: underline;
}

.layout-main {
  flex: 1;
  padding: 20px;
  overflow-y: auto;
  position: relative;
  z-index: 1;
  margin-left: 0;
}

.layout-sidebar:not(.hidden) + .layout-main {
  margin-left: -1px;
}

/* ДОБАВЛЕНО: компактный футер с минимальными отступами */
.layout-footer {
  background: var(--primary-bg);
  padding: 0 1rem; /* Уменьшаем вертикальные отступы */
  display: grid;
  grid-template-columns: auto 1fr auto;
  align-items: center;
  border-top: 1px solid var(--primary-border);
  line-height: 1;
  flex-shrink: 0;
  min-height: auto; /* Убираем фиксированную высоту */
}

/* ДОБАВЛЕНО: компактные стили для элементов управления */
.controls {
  display: flex;
  gap: 6px; /* уменьшен промежуток между элементами */
  align-items: center;
  padding: 2px 0; /* уменьшены внутренние отступы */
}

.theme-buttons {
  display: flex;
  gap: 4px; /* Уменьшаем расстояние между кнопками тем */
}

.theme-btn {
  padding: 4px 8px; /* Уменьшаем отступы в кнопках */
  font-size: 13px; /* Чуть меньший размер шрифта */
  min-width: 70px; /* Чуть уменьшаем минимальную ширину */
}

.font-btn {
  padding: 2px 6px; /* Уменьшаем отступы */
  font-size: 14px; /* Чуть меньший размер */
  width: 32px; /* Чуть уменьшаем размер */
  height: 32px;
}

.layout-footer > * {
  margin: 0;
}

.footer-left {
  justify-self: start;
}

.footer-center {
  justify-self: center;
  margin: 0;            /* Убираем отступы у текста */
  padding: 0;           /* Убираем внутренние отступы */  
}

.footer-center p {
  margin: 0;
  padding: 0;
  font-size: 0.9em; /* уменьшен размер шрифта */
}

.footer-right {
  justify-self: end;
  display: flex;
}



@media (max-width: 768px) {
  .layout-sidebar {
    position: fixed;
    top: 60px;
    bottom: 30px;
    left: 0;
  }
  
  .layout-sidebar.hidden {
    transform: translateX(-100%);
    width: 250px;
  }
  
  .layout-main {
    margin-left: 0 !important;
  }
}

Содержимое файла layout.js:
--------------------------------------------------
// Основная функция, которая запускается при загрузке DOM
document.addEventListener("DOMContentLoaded", initApp);

async function initApp() {
  try {
    await loadResources(); // (1) Ждём загрузки
    initLayout();          // (2) Запускаем инициализацию
  } catch (error) {
    handleError(error);    // (3) Обрабатываем ошибки
  }
}

async function loadResources() {
  const resources = [
    { type: 'css', url: 'layout.css' }, 
    { type: 'css', url: 'prism.css' }, 
    { type: 'js', url: 'prism.js' }
  ];

  // Создаем массив промисов для каждого ресурса
  const loadPromises = resources.map(resource => {
    return new Promise(async (resolve) => {
      try {
        await loadSingleResource(resource);
        resolve();
      } catch (error) {
        console.warn(`Ошибка загрузки ${resource.type}: ${resource.url}`);
        resolve(); // Все равно резолвим, чтобы не блокировать загрузку
      }
    });
  });

  // Ждем загрузки всех ресурсов
  await Promise.all(loadPromises);
}

async function loadSingleResource(resource) {
  return new Promise((resolve, reject) => {
    const element = createResourceElement(resource);
    
    element.onload = () => resolve();
    element.onerror = () => reject();
    
    document.head.appendChild(element);
  });
}

function createResourceElement(resource) {
  let element;
  
  if (resource.type === 'css') {
    element = document.createElement('link');
    element.rel = 'stylesheet';
    element.href = resource.url;
  } else {
    element = document.createElement('script');
    element.src = resource.url;
  }

  return element;
}

function initLayout() {
  replaceLayoutTags();
  initMenuToggle();
  initSubmenus();
  initResizableSidebar();

  window.dispatchEvent(new Event('layout-ready'));  
}

function replaceLayoutTags() {
  const layout = document.querySelector("my-layout");
  layout.outerHTML = createLayoutTemplate(layout.innerHTML.trim());
}

function createLayoutTemplate(content) {
  const sidebar = createSidebarMenu();
  const pageTitle = document.title; // Получаем содержимое тега title
  return `
    <div class="layout-page">
      <header class="layout-header">
        <div class="header-left">
          <button class="sidebar-toggle" id="sidebarToggle" aria-label="Toggle sidebar" aria-expanded="true">
          ✕
          </button>
        </div>
        <div class="header-center">
          <span class="logo">${pageTitle}</span>
        </div>
        <nav class="header-right">
          <a href="index.html">Главная</a>
          <a href="about.html">О нас</a>
          <a href="python.html">Python</a>
        </nav>
      </header>
      <div class="layout-content">
        <aside class="layout-sidebar" id="sidebar">
          ${sidebar}
        </aside>
        <main class="layout-main">
          ${content}
        </main>
      </div>
      <footer class="layout-footer">
        <div class="footer-left"></div>
        <div class="footer-center">
          <p>&copy; 2025 <a href="https://t.me/sergeyslesarev">Сергей Слесарев</a></p>
        </div>
        <div class="footer-right">
          <div class="controls"></div>
        </div>
      </footer>
    </div>
  `;
}

function createSidebarMenu() {
  return `
    <nav class="sidebar-menu">
      <ul>
        <li class="menu-group">
          <a href="#" class="menu-item" aria-haspopup="true">Продукция</a>
          <ul class="submenu">
            <li><a href="#">Телефонывапыфвапфывафывафывафываыфва</a></li>
            <li><a href="#">Ноутбуки</a></li>
            <li><a href="#">Аксессуары</a></li>
          </ul>
        </li>
        <li class="menu-group">
          <a href="#" class="menu-item" aria-haspopup="true">Услуги</a>
          <ul class="submenu">
            <li><a href="#">Ремонт</a></li>
            <li><a href="#">Обслуживание</a></li>
            <li><a href="#">Консультации</a></li>
          </ul>
        </li>
        <li class="menu-group">
          <a href="#" class="menu-item" aria-haspopup="true">Поддержка</a>
          <ul class="submenu">
            <li><a href="#">FAQ</a></li>
            <li><a href="#">Документация</a></li>
            <li><a href="#">Форум</a></li>
          </ul>
        </li>
      </ul>
    </nav>
  `;
}

function initMenuToggle() {
  document.getElementById('sidebarToggle').addEventListener('click', toggleSidebar);
}

function toggleSidebar() {
  const sidebar = document.getElementById('sidebar');
  const toggleBtn = document.getElementById('sidebarToggle');
  const isHidden = sidebar.classList.toggle('hidden');

  toggleBtn.textContent = isHidden ? '☰' : '✕';
  
  toggleBtn.setAttribute('aria-expanded', !isHidden);
}

function initSubmenus() {
  // 1. Находим элементы меню
  const menuItemList = document.querySelectorAll('.menu-group > .menu-item');
  
  // 2. Навешиваем обработчики
  menuItemList.forEach(function(menuItem) {
    menuItem.addEventListener('click', handleMenuItemClick);
  });
}

// 3. Обработчик клика
function handleMenuItemClick(event) {
  event.preventDefault();
  const submenu = this.nextElementSibling;
  
  if (submenu && submenu.classList.contains('submenu')) {
    submenu.classList.toggle('active');
    this.parentElement.classList.toggle('active'); // Важно: добавляем .active к .menu-group
  }
}


function initResizableSidebar() {
  const sidebar = document.getElementById('sidebar');
  if (!sidebar) return;

  const resizer = document.createElement('div');
  resizer.className = 'layout-sidebar-resizer';
  sidebar.appendChild(resizer);

  let startX, startWidth;

  resizer.addEventListener('mousedown', function(e) {
    startX = e.clientX;
    startWidth = sidebar.offsetWidth;
    
    // Создаем временную границу
    const activeBorder = document.createElement('div');
    activeBorder.className = 'layout-sidebar-resizer-active';
    activeBorder.style.right = (sidebar.offsetWidth - e.offsetX) + 'px';
    sidebar.appendChild(activeBorder);
    
    sidebar.classList.add('layout-sidebar-resizing');
    document.body.style.cursor = 'col-resize';
    document.body.style.userSelect = 'none';

    function handleMouseMove(e) {
      const newWidth = startWidth + (e.clientX - startX);
      const clampedWidth = Math.max(50, Math.min(600, newWidth));
      sidebar.style.width = clampedWidth + 'px';
      activeBorder.style.right = '0';
    }

    function handleMouseUp() {
      sidebar.removeChild(activeBorder);
      sidebar.classList.remove('layout-sidebar-resizing');
      document.body.style.cursor = '';
      document.body.style.userSelect = '';
      document.removeEventListener('mousemove', handleMouseMove);
    }

    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseup', handleMouseUp, { once: true });
    e.preventDefault();
  });
}


function handleError(error) {
  console.error('Ошибка при инициализации приложения:', error);
}

Содержимое файла prism.css:
--------------------------------------------------
/* body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  padding: 20px;
  max-width: 900px;
  margin: 0 auto;
  line-height: 1.6;
  color: #333;
} */

/* header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 30px;
  padding-bottom: 10px;
  border-bottom: 1px solid #eee;
} */

/* h1, h2, h3 {
  color: #2c3e50;
} */


.inline-code {
    white-space: nowrap;
    background-color: #f0f0f0;
    padding: 0.2em 0.4em;
    border-radius: 3px;
    font-family: 'Courier New', monospace;
    font-size: 0.9em;
    color: #c7254e;
}

.controls {
  display: flex;
  gap: 10px;
  align-items: center;
}

.theme-buttons {
  display: flex;
  gap: 6px;
}

.theme-btn {
  padding: 6px 10px;
  font-size: 14px;
  border: 1px solid #ccc;
  background: #f8f9fa;
  color: #333;
  border-radius: 6px;
  cursor: pointer;
  min-width: 80px;
  text-align: center;
  transition: all 0.2s ease;
}

.theme-btn:hover {
  background: #e9ecef;
}

.theme-btn.active {
  background: #007acc !important;
  color: white !important;
  border-color: #007acc !important;
  box-shadow: 0 0 0 2px rgba(0, 122, 204, 0.3);
}

.btn-theme-solarizedlight { background: #fdf6e3; color: #657b83; }
.btn-theme-solarizedlight:hover { border-color: #eee8d5; }
.btn-theme-coy { background: #fdfdfd; color: #333; }
.btn-theme-coy:hover { border-color: #e5e5e5; }
.btn-theme-okaidia { background: #2d2d2d; color: #cccccc; }
.btn-theme-okaidia:hover { border-color: #555; }
.btn-theme-tomorrow { background: #1d1f21; color: #c5c8c6; }
.btn-theme-tomorrow:hover { border-color: #333; }

.font-controls {
  display: flex;
  gap: 6px;
}

.font-btn {
  padding: 6px 10px;
  font-size: 18px;
  border: 1px solid #ccc;
  background: #007acc;
  color: white;
  border-radius: 6px;
  cursor: pointer;
  min-width: 40px;
  text-align: center;
  transition: all 0.2s ease;
  font-weight: bold;
}

.font-btn:disabled {
  background: #ccc;
  cursor: not-allowed;
}

p, ul, ol, blockquote {
  margin: 1em 0;
}

ul, ol {
  padding-left: 2em;
}

blockquote {
  padding: 0.5em 1em;
  background: #f5f5f5;
  border-left: 4px solid #ccc;
  color: #555;
  font-style: italic;
}



code {
  font-family: 'Consolas', 'Courier New', monospace;
  font-size: 15px;
  line-height: 1.4;
}

.code-container {
  position: relative;
  overflow: visible; /* Важно! */
  isolation: isolate;
}

pre {
  position: relative;
  margin: 1.5em 0;
  border-radius: 6px;
  overflow: visible;
  padding-top: 35px;
  background-clip: padding-box;
}

.copy-button {
  position: absolute;
  top: 10px;
  right: 10px;
  background: #444;
  color: white;
  border: none;
  padding: 6px 10px;
  font-size: 0.85em;
  cursor: pointer;
  border-radius: 4px;
  opacity: 0.9;
  transition: opacity 0.2s, background 0.2s;
  z-index: 100;
}

.copy-button:hover {
  opacity: 1;
  background: #222;
}

.copy-button.copied {
  background: #4CAF50;
}

.copy-button::after {
  content: "Скопировать в буфер";
  position: absolute;
  bottom: 100%;
  right: 0;
  transform: translateY(-8px);
  background: #333;
  color: white;
  padding: 4px 8px;
  font-size: 13px;
  border-radius: 4px;
  white-space: nowrap;
  opacity: 0;
  transition: opacity 0.2s;
  z-index: 20;
  font-family: sans-serif;
  pointer-events: none;
  z-index: 110;
  /* Улучшаем видимость */
  box-shadow: 0 2px 8px rgba(0,0,0,0.2);
  /* Гарантируем, что подсказка не будет обрезана */
  width: max-content;
  max-width: 200px;
}

.copy-button:hover::after {
  opacity: 1;
}

Содержимое файла prism.js:
--------------------------------------------------
// Подключение CSS
const styleLinks = [
  'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css',
  'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.css',
  'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/toolbar/prism-toolbar.min.css' // Добавьте этот стиль
];

styleLinks.forEach(href => {
  const link = document.createElement('link');
  link.rel = 'stylesheet';
  link.href = href;
  document.head.appendChild(link);
});

// Подключение JS
const scriptUrls = [
  'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-core.min.js',
  'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/autoloader/prism-autoloader.min.js',
  'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/line-numbers/prism-line-numbers.min.js',
  'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/toolbar/prism-toolbar.min.js', // Добавьте этот плагин
  'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/copy-to-clipboard/prism-copy-to-clipboard.min.js' // Должен быть после toolbar
];

scriptUrls.forEach(src => {
  const script = document.createElement('script');
  script.src = src;
  document.body.appendChild(script);
});

// Создание кнопок управления
function createControls() {
  const controlsContainer = document.querySelector('.controls');
  
  // Создаем контейнер для кнопок тем
  const themeButtonsContainer = document.createElement('div');
  themeButtonsContainer.className = 'theme-buttons';
  
  // Создаем кнопки тем
  const themes = [
    { name: 'Светлая', theme: 'prism', class: 'btn-theme-prism' },
    { name: 'Solarized', theme: 'prism-solarizedlight', class: 'btn-theme-solarizedlight' },
    { name: 'Coy', theme: 'prism-coy', class: 'btn-theme-coy' },
    { name: 'Okaidia', theme: 'prism-okaidia', class: 'btn-theme-okaidia' },
    { name: 'Тёмная', theme: 'prism-tomorrow', class: 'btn-theme-tomorrow' }
  ];
  
  themes.forEach(({ name, theme, class: btnClass }) => {
    const button = document.createElement('button');
    button.className = `theme-btn ${btnClass}`;
    button.textContent = name;
    button.dataset.theme = theme;
    themeButtonsContainer.appendChild(button);
  });
  
  // Создаем кнопки управления шрифтом
  const fontControls = document.createElement('div');
  fontControls.className = 'font-controls';
  
  const decBtn = document.createElement('button');
  decBtn.id = 'font-dec';
  decBtn.className = 'font-btn';
  decBtn.textContent = '−';
  
  const incBtn = document.createElement('button');
  incBtn.id = 'font-inc';
  incBtn.className = 'font-btn';
  incBtn.textContent = '+';
  
  fontControls.appendChild(decBtn);
  fontControls.appendChild(incBtn);
  
  // Добавляем все элементы в контейнер
  controlsContainer.appendChild(themeButtonsContainer);
  controlsContainer.appendChild(fontControls);
}

// Управление размером шрифта
function setupFontControls() {
  const MIN_FONT = 12;
  const MAX_FONT = 35;
  let currentSize = 18;

  const incBtn = document.getElementById('font-inc');
  const decBtn = document.getElementById('font-dec');

  function updateButtons() {
    decBtn.disabled = currentSize <= MIN_FONT;
    incBtn.disabled = currentSize >= MAX_FONT;
  }

  function updateCodeFontSize() {
    document.querySelectorAll('code').forEach(el => {
      el.style.fontSize = currentSize + 'px';
    });
  }

  incBtn.addEventListener('click', () => {
    if (currentSize < MAX_FONT) {
      currentSize++;
      updateCodeFontSize();
      updateButtons();
    }
  });

  decBtn.addEventListener('click', () => {
    if (currentSize > MIN_FONT) {
      currentSize--;
      updateCodeFontSize();
      updateButtons();
    }
  });

  updateButtons();
  updateCodeFontSize();
}

// Переключение тем
function setupThemeSwitcher() {
  const themeLink = document.createElement('link');
  themeLink.id = 'theme-link';
  themeLink.rel = 'stylesheet';
  themeLink.href = 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css';
  document.head.appendChild(themeLink);

  const themes = {
    'prism': 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism.min.css',
    'prism-solarizedlight': 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-solarizedlight.min.css',
    'prism-coy': 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-coy.min.css',
    'prism-okaidia': 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-okaidia.min.css',
    'prism-tomorrow': 'https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css'
  };

  function applyTheme(theme) {
    if (!themes[theme]) return false;
    
    themeLink.href = themes[theme];
    localStorage.setItem('prism-theme', theme);
    
    document.querySelectorAll('.theme-btn').forEach(b => b.classList.remove('active'));
    const activeButton = document.querySelector(`[data-theme="${theme}"]`);
    if (activeButton) activeButton.classList.add('active');
    
    return true;
  }

  // Восстанавливаем сохраненную тему
  const savedTheme = localStorage.getItem('prism-theme');
  if (savedTheme && themes[savedTheme]) {
    applyTheme(savedTheme);
  }

  // Обработчики для кнопок тем
  document.querySelectorAll('.theme-btn').forEach(button => {
    button.addEventListener('click', () => {
      const theme = button.dataset.theme;
      applyTheme(theme);
    });
  });
}

// Кнопки копирования
function setupCopyButtons() {
  if (!window.Prism || !Prism.plugins || !Prism.plugins.toolbar) {
    console.warn('Prism Toolbar plugin not loaded');
    return;
  }
  
  function createCopyButton(block) {
    // Проверяем, есть ли уже кнопка
    if (block.querySelector('.copy-button')) return;
    
    // Создаем контейнер для pre, если его еще нет
    if (!block.parentElement.classList.contains('code-container')) {
      const container = document.createElement('div');
      container.className = 'code-container';
      block.parentNode.insertBefore(container, block);
      container.appendChild(block);
    }

    // Создаем кнопку
    const btn = document.createElement('button');
    btn.className = 'copy-button';
    btn.textContent = 'Скопировать';
    
    // Обработчик клика
    btn.addEventListener('click', () => {
      if (!navigator.clipboard) {
        console.warn('Clipboard API не поддерживается');
        return;
      }
      
      const code = block.querySelector('code');
      navigator.clipboard.writeText(code.textContent.trim())
        .then(() => {
          btn.textContent = 'Скопировано!';
          btn.classList.add('copied');
          setTimeout(() => {
            btn.textContent = 'Скопировать';
            btn.classList.remove('copied');
          }, 2000);
        })
        .catch(err => {
          console.error('Ошибка копирования:', err);
          btn.textContent = 'Ошибка!';
          setTimeout(() => {
            btn.textContent = 'Скопировать';
          }, 2000);
        });
    });
    
    // Добавляем кнопку в блок
    block.appendChild(btn);
  }

  // Применяем ко всем блокам pre
  document.querySelectorAll('pre').forEach(block => {
    createCopyButton(block);
  });
}

// Инициализация
function initPrism() {
  createControls();
  setupFontControls();
  setupThemeSwitcher();
  
  const checkPrism = setInterval(() => {
    if (window.Prism && Prism.plugins && Prism.plugins.toolbar) {
      clearInterval(checkPrism);
      setupCopyButtons(); // Теперь можно инициализировать кнопки копирования
      Prism.highlightAll();
    }
  }, 100);
}

// Ждем когда layout будет готов
window.addEventListener('layout-ready', initPrism);

Содержимое файла waits.html:
--------------------------------------------------
<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Явные ожидания</title>
  <script src="layout.js" defer></script>
</head>
<body>
<my-layout>
  <h2>1. Предварительное задание.</h2>

  <p>Создайте новый проект ExplicitWaits. Выполните 2 команды: </p>

  <pre><code class="language-batch">python -m pip install --upgrade pip</code></pre>

  <pre><code class="language-batch">pip install pytest selenium</code></pre>

  <p>В проекте ExplicitWaits создайте папку tests, в ней файл для тестов test_explicit_waits.py, 
    добавьте в этот файл тест, который откроет страницу: 
    <a href="https://slqamsk.github.io/tmp/dl_hidden.html">https://slqamsk.github.io/tmp/dl_hidden.html</a>, 
    нажмёт кнопку показать и проверит, что элемент с id равным message видим на странице. <br>
    Запустите автотест, убедитесь, что без наличия явных ожиданий возникает ошибка.
  </p>

  <h2>2. Пример. Создание явного ожидания - видимость.</h2>
  <p>
    Для страницы <a href="https://slqamsk.github.io/tmp/dl_hidden.html">https://slqamsk.github.io/tmp/dl_hidden.html</a> 
    напишите автотест, который нажмёмт на кнопку "Показать", дождётся, что элемент с id равным message станет видимым и проверит, что он видимый. 
  </p>
  <pre class="line-numbers"><code class="language-python"># -*- coding: utf-8 -*-
# файл: test_explicit_waits.py
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions

# URL тестовой страницы
URL = "https://slqamsk.github.io/tmp/dl_hidden.html"

def test_dl_hidden():
    # Инициализация драйвера Chrome
    driver = webdriver.Chrome()
    # Ожидание с таймаутом 10 секунд
    wait = WebDriverWait(driver, 10)
    # Локатор элемента с сообщением
    locator = (By.ID, "message")
    # Открытие тестовой страницы
    driver.get(URL)
    # Нажатие кнопки "Показать"
    driver.find_element(By.ID, "showBtn").click()
    # Ожидание видимости элемента
    condition = expected_conditions.visibility_of_element_located(locator)
    wait.until(condition)
    # Проверка, что элемент отображается
    assert driver.find_element(*locator).is_displayed()
    # Закрытие браузера (неявно происходит при завершении функции)
    driver.quit()
  </code></pre>


  <h2>3. Пример. Создание явного ожидания - невидимость.</h2>
  <p>
    Для предыдущего примера добавьте в конце автотеста нажатие кнопки "Скрыть" и проверки, что элемент с id равным message стал невидимым.
  </p>
  <pre class="line-numbers"><code class="language-python"># -*- coding: utf-8 -*-
# файл: test_explicit_waits.py
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions

# URL тестовой страницы
URL = "https://slqamsk.github.io/tmp/dl_hidden.html"

def test_dl_hidden():
    # Инициализация драйвера Chrome
    driver = webdriver.Chrome()
    # Ожидание с таймаутом 10 секунд
    wait = WebDriverWait(driver, 10)
    # Локатор элемента с сообщением
    locator = (By.ID, "message")
    # Открытие тестовой страницы
    driver.get(URL)
    # Нажатие кнопки "Показать"
    driver.find_element(By.ID, "showBtn").click()
    # Ожидание видимости элемента
    condition = expected_conditions.visibility_of_element_located(locator)
    wait.until(condition)
    # Проверка, что элемент отображается
    assert driver.find_element(*locator).is_displayed()
    # Нажатие кнопки "Скрыть"
    driver.find_element(By.ID, "hideBtn").click()
    # Ожидание невидимости элемента
    condition = expected_conditions.invisibility_of_element_located(locator)
    wait.until(condition)
    # Проверка, что элемент не отображается
    assert not driver.find_element(*locator).is_displayed()
    # Закрытие браузера (неявно происходит при завершении функции)
    driver.quit()</code></pre>

  <h2>4. Пример. Создание явного ожидания - существование элемента.</h2>
  <p>
    Для страницы <a href="https://slqamsk.github.io/tmp/dl_removed.html">https://slqamsk.github.io/tmp/dl_removed.html</a> 
    напишите автотест, который нажмёмт на кнопку "Добавить", дождётся, что элемент с id равным message появится 
    и проверит, что он появился. 
   </p>
  <pre class="line-numbers"><code class="language-python"># -*- coding: utf-8 -*-
# файл: test_sorting_hat.py
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions

# URL тестовой страницы
URL_HIDDEN = "https://slqamsk.github.io/tmp/dl_hidden.html"
URL_REMOVED = "https://slqamsk.github.io/tmp/dl_removed.html"
def test_dl_removed():
    # Инициализация драйвера Chrome
    driver = webdriver.Chrome()
    # Ожидание с таймаутом 10 секунд
    wait = WebDriverWait(driver, 10)
    # Локатор элемента с сообщением
    locator = (By.ID, "message")
    # Открытие тестовой страницы
    driver.get(URL_REMOVED)
    # Нажатие кнопки "Показать"
    driver.find_element(By.ID, "addBtn").click()
    # Ожидание появления элемента
    condition = expected_conditions.presence_of_element_located(locator)
    wait.until(condition)
    # Проверка, что элемента нет
    elements = driver.find_elements(*locator)
    assert len(elements) == 1
    # Закрытие браузера (неявно происходит при завершении функции)
    driver.quit()
  </code></pre>

    <h2>5. Пример. Создание явного ожидания - исчезновение элемента.</h2>
  <p>
    Для предыдущего примера добавьте в конце автотеста нажатие кнопки "Удалить" и проверки, 
    что элемент с id равным message исчез со страницы.
  </p>
  <pre class="line-numbers"><code class="language-python"># -*- coding: utf-8 -*-
# файл: test_sorting_hat.py
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions

# URL тестовой страницы
URL_HIDDEN = "https://slqamsk.github.io/tmp/dl_hidden.html"
URL_REMOVED = "https://slqamsk.github.io/tmp/dl_removed.html"
def test_dl_removed():
    # Инициализация драйвера Chrome
    driver = webdriver.Chrome()
    # Ожидание с таймаутом 10 секунд
    wait = WebDriverWait(driver, 10)
    # Локатор элемента с сообщением
    locator = (By.ID, "message")
    # Открытие тестовой страницы
    driver.get(URL_REMOVED)
    # Нажатие кнопки "Показать"
    driver.find_element(By.ID, "addBtn").click()
    # Ожидание появления элемента
    condition = expected_conditions.presence_of_element_located(locator)
    wait.until(condition)
    # Проверка, что элемента нет
    elements = driver.find_elements(*locator)
    assert len(elements) == 1
    # Нажатие кнопки "Скрыть"
    driver.find_element(By.ID, "removeBtn").click()
    # Ожидание, когда элемент пропадёт
    condition = expected_conditions.presence_of_element_located(locator)
    wait.until_not(condition)
    # Проверка, что элемент есть
    elements = driver.find_elements(*locator)
    assert len(elements) == 0
    # Закрытие браузера (неявно происходит при завершении функции)
    driver.quit()
  </code></pre>

  <h2>6. Самостоятельное задание на ожидание видимости элемента</h2>
  <p>
    Для страницы <a href="https://the-internet.herokuapp.com/dynamic_loading/1">
      https://the-internet.herokuapp.com/dynamic_loading/1</a> 
    напишите автотест, который нажмёмт на кнопку "Start", дождётся, 
    что появился текст Hello World! 
   </p>

  <h2>7. Самостоятельное задание на ожидание появления элемента</h2>
  <p>
    Для страницы <a href="https://the-internet.herokuapp.com/dynamic_loading/2">
      https://the-internet.herokuapp.com/dynamic_loading/2</a> 
    напишите автотест, который нажмёмт на кнопку "Start", дождётся, 
    что появился текст Hello World! 
   </p>


  <h2>8. Самостоятельное задание на ожидание появления элемента</h2>
  <p>
    Для страницы <a href="https://the-internet.herokuapp.com/dynamic_controls">
      https://the-internet.herokuapp.com/dynamic_controls</a> 
    напишите автотест, который нажмёмт на кнопки "Remove", "Add" и дождётся, 
    удаления, появления элемента чек-бокс.
   </p>

  <h2>9. Самостоятельное задание на ожидание доступности элемента</h2>
  <p>
    Для страницы <a href="https://the-internet.herokuapp.com/dynamic_controls">
      https://the-internet.herokuapp.com/dynamic_controls</a> 
    напишите автотест, который нажмёмт на кнопки "Enable" и дождётся, 
    когда поле редактирования станет доступным для редактирования и после этого 
    напечатайте в нём своё имя.
   </p>
</my-layout>
</body>
</html>

