Содержимое файла: v08\cart.html
--------------------------------------------------
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Пиццерия - Корзина</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="header-nav">
        <div class="nav-left">
            <a href="index.html" id="back-link" class="btn-link">Меню</a>
        </div>
        <div class="nav-right">
            <a href="orders.html" class="orders-link">Мои заказы</a>
            <a href="cart.html" class="cart-link">Корзина <span id="cart-count">0</span></a>
        </div>
    </div>

    <header style="text-align: center; margin-bottom: 20px;">
        <h1>Пиццерия "Итальянский уголок"</h1>
    </header>

    <div class="cart">
        <h2>Ваша корзина</h2>
        <div id="cart-items">
            <p>Корзина пуста</p>
        </div>
        
        <div class="total-price" id="total-price">
            Итого: 0 ₽
        </div>
        
        <div class="action-buttons">
            <button class="btn clear-btn" id="clear-cart">Очистить корзину</button>
            <button class="btn order-btn" id="place-order">Оформить заказ</button>
        </div>
    </div>

    <script src="pizza-data.js"></script>
    <script src="cart.js"></script>
    <script>
        // Обновляем счетчик корзины при загрузке страницы
        document.addEventListener('DOMContentLoaded', function() {
            updateCartCounter();
        });
    </script>
</body>
</html>

Содержимое файла: v08\cart.js
--------------------------------------------------
// cart.js
// Функция для получения данных из URL
function getDataFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    const cartParam = urlParams.get('cart');
    const cart = {};
    
    if (cartParam && cartParam !== '') {
        cartParam.split(',').forEach(item => {
            const [id, quantity] = item.split(':');
            if (id && quantity) {
                cart[id] = parseInt(quantity);
            }
        });
    }
    
    return {
        cart: cart,
        name: urlParams.get('name') || '',
        email: urlParams.get('email') || ''
    };
}

// Функция для обновления URL с данными
function updateURLWithData(data) {
    const cartParams = [];
    for (const id in data.cart) {
        if (data.cart[id] > 0) {
            cartParams.push(`${id}:${data.cart[id]}`);
        }
    }
    
    const urlParams = new URLSearchParams();
    
    if (cartParams.length > 0) {
        urlParams.set('cart', cartParams.join(','));
    } else {
        urlParams.delete('cart');
    }
    
    if (data.name) urlParams.set('name', data.name);
    if (data.email) urlParams.set('email', data.email);
    
    const newUrl = `${window.location.pathname}?${urlParams.toString()}`;
    window.history.replaceState({}, '', newUrl);
    
    // Обновляем все ссылки
    updateAllLinks();
}

// Функция для обновления всех ссылок на странице
function updateAllLinks() {
    const urlParams = new URLSearchParams(window.location.search);
    const data = getDataFromURL();
    
    // Сохраняем данные в URL для ссылок
    const cartParams = [];
    for (const id in data.cart) {
        if (data.cart[id] > 0) {
            cartParams.push(`${id}:${data.cart[id]}`);
        }
    }
    
    if (cartParams.length > 0) {
        urlParams.set('cart', cartParams.join(','));
    } else {
        urlParams.delete('cart');
    }
    
    if (data.name) urlParams.set('name', data.name);
    if (data.email) urlParams.set('email', data.email);
    
    // Обновляем все ссылки
    document.querySelectorAll('a[href*="index.html"]').forEach(link => {
        link.href = `index.html?${urlParams.toString()}`;
    });
    
    document.querySelectorAll('a[href*="cart.html"]').forEach(link => {
        link.href = `cart.html?${urlParams.toString()}`;
    });
    
    document.querySelectorAll('a[href*="order.html"]').forEach(link => {
        link.href = `order.html?${urlParams.toString()}`;
    });
    
    document.querySelectorAll('a[href*="orders.html"]').forEach(link => {
        link.href = `orders.html?${urlParams.toString()}`;
    });
}

// Функция для обновления счетчика корзины
function updateCartCounter() {
    const data = getDataFromURL();
    let totalCount = 0;
    
    for (const id in data.cart) {
        totalCount += data.cart[id];
    }
    
    const cartCountElement = document.getElementById('cart-count');
    if (cartCountElement) {
        cartCountElement.textContent = totalCount;
    }
}

const data = getDataFromURL();
const cart = data.cart;
const cartItemsEl = document.getElementById('cart-items');
const totalPriceEl = document.getElementById('total-price');
const clearBtn = document.getElementById('clear-cart');
const orderBtn = document.getElementById('place-order');
const backLink = document.getElementById('back-link');

// Обновление корзины
function updateCart() {
    if (Object.keys(cart).length === 0) {
        cartItemsEl.innerHTML = '<p>Корзина пуста</p>';
        totalPriceEl.textContent = 'Итого: 0 ₽';
        updateCartCounter(); // Обновляем счетчик
        return;
    }
    
    let html = '';
    for (const [id, quantity] of Object.entries(cart)) {
        const pizza = pizzaData.find(p => p.id == id);
        if (!pizza) continue;
        
        html += `
        <div class="cart-item">
            <span>${pizza.name} - ${pizza.price} ₽</span>
            <div class="cart-controls">
                <button class="quantity-btn minus" data-id="${id}">-</button>
                <span>${quantity}</span>
                <button class="quantity-btn plus" data-id="${id}">+</button>
            </div>
        </div>
        `;
    }
    cartItemsEl.innerHTML = html;
    totalPriceEl.textContent = `Итого: ${calculateTotal()} ₽`;
    updateCartCounter(); // Обновляем счетчик
    
    // Добавляем обработчики для кнопок +/-
    document.querySelectorAll('.minus').forEach(btn => {
        btn.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            if (cart[id] > 1) {
                cart[id]--;
            } else {
                delete cart[id];
            }
            updateURLWithData(data);
            updateCart();
        });
    });
    
    document.querySelectorAll('.plus').forEach(btn => {
        btn.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            cart[id] = (cart[id] || 0) + 1;
            updateURLWithData(data);
            updateCart();
        });
    });
}

// Расчет общей суммы
function calculateTotal() {
    let total = 0;
    for (const [id, quantity] of Object.entries(cart)) {
        const pizza = pizzaData.find(p => p.id == id);
        if (pizza) {
            total += pizza.price * quantity;
        }
    }
    return total;
}

// Очистка корзины
clearBtn.addEventListener('click', function() {
    for (const key in cart) {
        delete cart[key];
    }
    updateURLWithData(data);
    updateCart();
});

// Переход к оформлению заказа
orderBtn.addEventListener('click', function() {
    if (Object.keys(cart).length === 0) {
        alert('Корзина пуста!');
        return;
    }
    
    // Сохраняем текущее состояние перед переходом
    updateURLWithData(data);
    window.location.href = `order.html?${new URLSearchParams(window.location.search).toString()}`;
});

// Обновляем ссылку возврата с параметрами
if (backLink) {
    backLink.addEventListener('click', function(e) {
        e.preventDefault();
        updateURLWithData(data); // Сохраняем текущее состояние перед переходом
        window.location.href = `index.html?${new URLSearchParams(window.location.search).toString()}`;
    });
}

// Инициализация корзины
updateCart();
updateAllLinks();

Содержимое файла: v08\index.html
--------------------------------------------------
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Пиццерия - Меню</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="header-nav">
        <div class="nav-left">
            <a href="index.html" class="btn-link">Меню</a>
        </div>
        <div class="nav-right">
            <a href="orders.html" class="orders-link">Мои заказы</a>
            <a href="cart.html" class="cart-link">Корзина <span id="cart-count">0</span></a>
        </div>
    </div>
    
    <header style="text-align: center; margin-bottom: 20px;">
        <h1>Пиццерия "Итальянский уголок"</h1>
    </header>
    
    <div>
        <h3>Истинный вкус Италии в вашем городе!</h3>
        <p>Попробуйте наши хиты: <strong>Маргарита</strong>, <strong>Пепперони</strong>, <strong>Гавайская</strong>, <strong>Четыре сыра</strong> и <strong>Вегетарианская</strong>. А также новые: <strong>Карбонара</strong> с нежным беконом, <strong>Мясная</strong> для настоящих гурманов и <strong>Трюфельная</strong> для особых случаев.</p>
        <h3>Готовим с душой в дровяной печи</h3>
        <p>Тонкое тесто, свежайшие продукты и секретные рецепты — вот наш секрет идеальной пиццы.</p>
    </div>
    
    <div class="container" id="menu-container">
        <!-- Карточки пиццы будут создаваться через JavaScript -->
    </div>

    <div class="notification-area" id="notification-area">
        <!-- Здесь будет только одно сообщение -->
    </div>

    <script src="pizza-data.js"></script>
    <script src="script.js"></script>
</body>
</html>

Содержимое файла: v08\order.html
--------------------------------------------------
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Пиццерия - Оформление заказа</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="header-nav">
        <div class="nav-left">
            <a href="index.html" class="btn-link">Меню</a>
        </div>
    <div class="nav-right">
        <a href="orders.html" class="orders-link">Мои заказы</a>
        <a href="cart.html" class="cart-link">Корзина <span id="cart-count">0</span></a>
    </div>
    </div>

    <header style="text-align: center; margin-bottom: 20px;">
        <h1>Пиццерия "Итальянский уголок"</h1>
    </header>

    <div class="cart">
        <h2>Оформление заказа</h2>
        
        <div class="order-form">
            <div class="form-group">
                <label for="customer-name">Ваше имя:</label>
                <input type="text" id="customer-name" placeholder="Иван Иванов">
            </div>
            
            <div class="form-group">
                <label for="customer-email">Ваш email:</label>
                <input type="email" id="customer-email" placeholder="ivan@example.com">
            </div>
            
            <div class="action-buttons">
                <button class="btn order-btn" id="confirm-order">Подтвердить заказ</button>
            </div>
        </div>

        <div id="order-summary">
            <!-- Здесь будет сводка заказа -->
        </div>

        <div class="order-info" id="order-info">
            <!-- Здесь будет информация о подтвержденном заказе -->
        </div>
    </div>

    <script src="pizza-data.js"></script>
    <script src="order.js"></script>
    <script>
        // Обновляем счетчик корзины при загрузке страницы
        document.addEventListener('DOMContentLoaded', function() {
            updateCartCounter();
        });
    </script>
</body>
</html>

Содержимое файла: v08\order.js
--------------------------------------------------
// order.js
// Функция для получения данных из URL
function getDataFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    const cartParam = urlParams.get('cart');
    const cart = {};
    
    if (cartParam && cartParam !== '') {
        cartParam.split(',').forEach(item => {
            const [id, quantity] = item.split(':');
            if (id && quantity) {
                cart[id] = parseInt(quantity);
            }
        });
    }
    
    return {
        cart: cart,
        name: urlParams.get('name') || '',
        email: urlParams.get('email') || ''
    };
}

// Функция для обновления URL с данными
function updateURLWithData(data) {
    const cartParams = [];
    for (const id in data.cart) {
        if (data.cart[id] > 0) {
            cartParams.push(`${id}:${data.cart[id]}`);
        }
    }
    
    const urlParams = new URLSearchParams();
    
    if (cartParams.length > 0) {
        urlParams.set('cart', cartParams.join(','));
    }
    
    if (data.name) urlParams.set('name', data.name);
    if (data.email) urlParams.set('email', data.email);
    
    const newUrl = urlParams.toString() ? `${window.location.pathname}?${urlParams.toString()}` : window.location.pathname;
    window.history.replaceState({}, '', newUrl);
    
    // Обновляем все ссылки
    updateAllLinks();
}

// Функция для обновления всех ссылок на странице
function updateAllLinks() {
    const urlParams = new URLSearchParams();
    const data = getDataFromURL();
    
    // Сохраняем данные в URL
    const cartParams = [];
    for (const id in data.cart) {
        if (data.cart[id] > 0) {
            cartParams.push(`${id}:${data.cart[id]}`);
        }
    }
    
    if (cartParams.length > 0) {
        urlParams.set('cart', cartParams.join(','));
    }
    
    if (data.name) urlParams.set('name', data.name);
    if (data.email) urlParams.set('email', data.email);
    
    const queryString = urlParams.toString();
    
    // Обновляем все ссылки
    document.querySelectorAll('a[href*="index.html"]').forEach(link => {
        link.href = queryString ? `index.html?${queryString}` : 'index.html';
    });
    
    document.querySelectorAll('a[href*="cart.html"]').forEach(link => {
        link.href = queryString ? `cart.html?${queryString}` : 'cart.html';
    });
    
    document.querySelectorAll('a[href*="order.html"]').forEach(link => {
        link.href = queryString ? `order.html?${queryString}` : 'order.html';
    });
    
    document.querySelectorAll('a[href*="orders.html"]').forEach(link => {
        link.href = queryString ? `orders.html?${queryString}` : 'orders.html';
    });
}

// Функция для обновления счетчика корзины
function updateCartCounter() {
    const data = getDataFromURL();
    let totalCount = 0;
    
    for (const id in data.cart) {
        totalCount += data.cart[id];
    }
    
    const cartCountElement = document.getElementById('cart-count');
    if (cartCountElement) {
        cartCountElement.textContent = totalCount;
    }
}

// Функция для получения заказов из localStorage
function getOrders() {
    const orders = localStorage.getItem('pizzaOrders');
    return orders ? JSON.parse(orders) : [];
}

// Функция для сохранения заказов в localStorage
function saveOrders(orders) {
    localStorage.setItem('pizzaOrders', JSON.stringify(orders));
}

// Функция для добавления нового заказа
function addOrder(cart, name, email) {
    const orders = getOrders();
    const orderNumber = Math.floor(Math.random() * 10000);
    
    const orderItems = [];
    for (const [id, quantity] of Object.entries(cart)) {
        orderItems.push({ id: parseInt(id), quantity: quantity });
    }
    
    const newOrder = {
        orderNumber: orderNumber,
        name: name,
        email: email,
        date: new Date().toISOString(),
        status: 'Ожидает подтверждения',
        items: orderItems
    };
    
    orders.push(newOrder);
    saveOrders(orders);
    
    return newOrder;
}

// Функция для очистки корзины в данных
function clearCartInData(data) {
    for (const key in data.cart) {
        delete data.cart[key];
    }
    return data;
}

const data = getDataFromURL();
const cart = data.cart;
const orderSummaryEl = document.getElementById('order-summary');
const orderInfoEl = document.getElementById('order-info');
const confirmBtn = document.getElementById('confirm-order');
const nameInput = document.getElementById('customer-name');
const emailInput = document.getElementById('customer-email');

// Заполняем поля формы данными из URL
if (data.name) nameInput.value = data.name;
if (data.email) emailInput.value = data.email;

// Обновляем сводку заказа
function updateOrderSummary() {
    if (Object.keys(cart).length === 0) {
        orderSummaryEl.innerHTML = '<p>Корзина пуста</p>';
        return;
    }
    
    let html = `
        <h3>Ваш заказ:</h3>
        <div class="cart">
            <div id="order-items">
    `;
    
    let total = 0;
    for (const [id, quantity] of Object.entries(cart)) {
        const pizza = pizzaData.find(p => p.id == id);
        if (pizza) {
            const itemTotal = pizza.price * quantity;
            total += itemTotal;
            html += `
                <div class="cart-item">
                    <span>${pizza.name} - ${quantity} шт. × ${pizza.price} ₽</span>
                    <span>${itemTotal} ₽</span>
                </div>
            `;
        }
    }
    
    html += `
            </div>
            <div class="total-price">
                Итого: ${total} ₽
            </div>
        </div>
    `;
    
    orderSummaryEl.innerHTML = html;
}

// Подтверждение заказа
confirmBtn.addEventListener('click', function() {
    const name = nameInput.value;
    const email = emailInput.value;
    
    if (!name || !email) {
        alert('Пожалуйста, заполните все поля!');
        return;
    }
    
    if (Object.keys(cart).length === 0) {
        alert('Корзина пуста!');
        return;
    }
    
    // Сохраняем данные пользователя
    data.name = name;
    data.email = email;
    updateURLWithData(data);
    
    // Сохраняем заказ
    const newOrder = addOrder(cart, name, email);
    
    let orderDetails = `
        <h3>Заказ успешно оформлен!</h3>
        <p><strong>Номер заказа:</strong> #${newOrder.orderNumber}</p>
        <p><strong>Имя:</strong> ${name}</p>
        <p><strong>Email:</strong> ${email}</p>
        <p><strong>Выбранные пиццы:</strong></p>
        <ul>
    `;
    
    let total = 0;
    for (const [id, quantity] of Object.entries(cart)) {
        const pizza = pizzaData.find(p => p.id == id);
        if (pizza) {
            const itemTotal = pizza.price * quantity;
            total += itemTotal;
            orderDetails += `<li>${pizza.name} - ${quantity} шт. (${itemTotal} ₽)</li>`;
        }
    }
    
    orderDetails += `
        </ul>
        <p><strong>Общая стоимость:</strong> ${total} ₽</p>
        <p><strong>Статус:</strong> Ожидает подтверждения</p>
        <p>Спасибо за ваш заказ! Мы свяжемся с вами в ближайшее время для подтверждения.</p>
        <a href="orders.html" class="btn" style="text-decoration: none; margin-top: 15px; display: inline-block;">
            Посмотреть мои заказы
        </a>
    `;
    
    orderInfoEl.innerHTML = orderDetails;
    orderInfoEl.style.display = 'block';
    
    // Очищаем корзину в данных и URL
    clearCartInData(data);
    updateURLWithData(data);
    updateCartCounter(); // Обновляем счетчик
    
    // Скрываем форму после оформления
    document.querySelector('.order-form').style.display = 'none';
    orderSummaryEl.style.display = 'none';
});

// Обновляем URL при изменении полей ввода
nameInput.addEventListener('input', function() {
    data.name = this.value;
    updateURLWithData(data);
});

emailInput.addEventListener('input', function() {
    data.email = this.value;
    updateURLWithData(data);
});

// Инициализация страницы
document.addEventListener('DOMContentLoaded', function() {
    updateOrderSummary();
    updateAllLinks();
    updateCartCounter(); // Обновляем счетчик при загрузке
});

Содержимое файла: v08\orders.html
--------------------------------------------------
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Пиццерия - Мои заказы</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="header-nav">
        <div class="nav-left">
            <a href="index.html" class="btn-link">Меню</a>
        </div>
        <div class="nav-right">
            <a href="orders.html" class="orders-link">Мои заказы</a>
            <a href="cart.html" class="cart-link">Корзина <span id="cart-count">0</span></a>
        </div>
    </div>

    <header style="text-align: center; margin-bottom: 20px;">
        <h1>Пиццерия "Итальянский уголок"</h1>
    </header>

    <div class="cart">
        <h2>Мои заказы</h2>
        
        <div id="orders-list">
            <!-- Здесь будет список заказов -->
            <p>У вас пока нет заказов</p>
        </div>
    </div>

    <script src="pizza-data.js"></script>
    <script src="orders.js"></script>
    <script>
        // Обновляем счетчик корзины при загрузке страницы
        document.addEventListener('DOMContentLoaded', function() {
            updateCartCounter();
        });
    </script>
</body>
</html>

Содержимое файла: v08\orders.js
--------------------------------------------------
// orders.js
// Функция для получения данных из URL
function getDataFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    const cartParam = urlParams.get('cart');
    const cart = {};
    
    if (cartParam && cartParam !== '') {
        cartParam.split(',').forEach(item => {
            const [id, quantity] = item.split(':');
            if (id && quantity) {
                cart[id] = parseInt(quantity);
            }
        });
    }
    
    return {
        cart: cart,
        name: urlParams.get('name') || '',
        email: urlParams.get('email') || ''
    };
}

// Функция для обновления всех ссылок на странице
function updateAllLinks() {
    const urlParams = new URLSearchParams();
    const data = getDataFromURL();
    
    // Сохраняем данные в URL
    const cartParams = [];
    for (const id in data.cart) {
        if (data.cart[id] > 0) {
            cartParams.push(`${id}:${data.cart[id]}`);
        }
    }
    
    if (cartParams.length > 0) {
        urlParams.set('cart', cartParams.join(','));
    }
    
    if (data.name) urlParams.set('name', data.name);
    if (data.email) urlParams.set('email', data.email);
    
    const queryString = urlParams.toString();
    
    // Обновляем все ссылки
    document.querySelectorAll('a[href*="index.html"]').forEach(link => {
        link.href = queryString ? `index.html?${queryString}` : 'index.html';
    });
    
    document.querySelectorAll('a[href*="cart.html"]').forEach(link => {
        link.href = queryString ? `cart.html?${queryString}` : 'cart.html';
    });
    
    document.querySelectorAll('a[href*="order.html"]').forEach(link => {
        link.href = queryString ? `order.html?${queryString}` : 'order.html';
    });
    
    document.querySelectorAll('a[href*="orders.html"]').forEach(link => {
        link.href = queryString ? `orders.html?${queryString}` : 'orders.html';
    });
}

// Функция для обновления счетчика корзины
function updateCartCounter() {
    const data = getDataFromURL();
    let totalCount = 0;
    
    for (const id in data.cart) {
        totalCount += data.cart[id];
    }
    
    const cartCountElement = document.getElementById('cart-count');
    if (cartCountElement) {
        cartCountElement.textContent = totalCount;
    }
}

// Функция для получения заказов из localStorage
function getOrders() {
    const orders = localStorage.getItem('pizzaOrders');
    return orders ? JSON.parse(orders) : [];
}

// Функция для сохранения заказов в localStorage
function saveOrders(orders) {
    localStorage.setItem('pizzaOrders', JSON.stringify(orders));
}

// Функция для отображения заказов
function displayOrders() {
    const orders = getOrders();
    const ordersListEl = document.getElementById('orders-list');
    
    if (orders.length === 0) {
        ordersListEl.innerHTML = '<p>У вас пока нет заказов</p>';
        return;
    }
    
    let html = '';
    orders.forEach((order, index) => {
        html += `
            <div class="order-item">
                <h3>Заказ #${order.orderNumber}</h3>
                <p><strong>Имя:</strong> ${order.name}</p>
                <p><strong>Email:</strong> ${order.email}</p>
                <p><strong>Дата:</strong> ${new Date(order.date).toLocaleString()}</p>
                <p><strong>Статус:</strong> ${order.status}</p>
                <p><strong>Пиццы:</strong></p>
                <ul>
        `;
        
        let total = 0;
        order.items.forEach(item => {
            const pizza = pizzaData.find(p => p.id == item.id);
            if (pizza) {
                const itemTotal = pizza.price * item.quantity;
                total += itemTotal;
                html += `<li>${pizza.name} - ${item.quantity} шт. × ${pizza.price} ₽ = ${itemTotal} ₽</li>`;
            }
        });
        
        html += `
                </ul>
                <p><strong>Общая стоимость:</strong> ${total} ₽</p>
                <button class="btn clear-btn cancel-order-btn" data-index="${index}">
                    Отменить заказ
                </button>
            </div>
        `;
    });
    
    ordersListEl.innerHTML = html;
    
    // Добавляем обработчики для кнопок отмены
    document.querySelectorAll('.cancel-order-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const index = parseInt(this.getAttribute('data-index'));
            cancelOrder(index);
        });
    });
}

// Функция для отмены заказа
function cancelOrder(index) {
    const orders = getOrders();
    if (confirm('Вы уверены, что хотите отменить этот заказ?')) {
        orders.splice(index, 1);
        saveOrders(orders);
        displayOrders();
    }
}

// Инициализация страницы
document.addEventListener('DOMContentLoaded', function() {
    displayOrders();
    updateAllLinks();
    updateCartCounter(); // Обновляем счетчик при загрузке
});

Содержимое файла: v08\pizza-data.js
--------------------------------------------------
// pizza-data.js
const pizzaData = [
    {
        id: 1,
        name: "Маргарита",
        description: "Томатный соус, моцарелла, базилик",
        price: 450,
        available: "Y"
    },
    {
        id: 2,
        name: "Пепперони",
        description: "Томатный соус, моцарелла, пепперони",
        price: 550,
        available: "Y"
    },
    {
        id: 3,
        name: "Гавайская",
        description: "Томатный соус, моцарелла, курица, ананас",
        price: 500,
        available: "Y"
    },
    {
        id: 4,
        name: "Четыре сыра",
        description: "Сливочный соус, моцарелла, пармезан, дор блю, чеддер",
        price: 600,
        available: "Y"
    },
    {
        id: 5,
        name: "Вегетарианская",
        description: "Томатный соус, моцарелла, перец, грибы, оливки, кукуруза",
        price: 500,
        available: "Y"
    },
    {
        id: 6,
        name: "Карбонара",
        description: "Сливочный соус, моцарелла, бекон, яйцо, пармезан",
        price: 580,
        available: "H"
    },
    {
        id: 7,
        name: "Мясная",
        description: "Томатный соус, моцарелла, пепперони, ветчина, бекон, курица",
        price: 650,
        available: "Y"
    },
    {
        id: 8,
        name: "Трюфельная",
        description: "Сливочный соус, моцарелла, трюфельное масло, грибы, пармезан",
        price: 750,
        available: "N"
    },
    {
        id: 9,
        name: "Диабло",
        description: "Острый томатный соус, моцарелла, салями, перец халапеньо, чили",
        price: 570,
        available: "H"
    }
];

// Пиццы, которые никогда не могут быть пиццей дня
const excludedFromDaily = ["Маргарита", "Четыре сыра", "Вегетарианская"];

Содержимое файла: v08\script.js
--------------------------------------------------
// script.js
// Данные о пиццах теперь импортируются из pizza-data.js
// Выбираем случайную пиццу дня из доступных, исключая запрещенные
function getPizzaOfTheDay() {
    const availablePizzas = pizzaData.filter(pizza => 
        pizza.available === "Y" && !excludedFromDaily.includes(pizza.name)
    );
    
    if (availablePizzas.length === 0) return null;
    
    const randomIndex = Math.floor(Math.random() * availablePizzas.length);
    return availablePizzas[randomIndex];
}

const pizzaOfTheDay = getPizzaOfTheDay();

// Создаем объект prices для обратной совместимости
const prices = {};
pizzaData.forEach(pizza => {
    if (pizza.available === "Y") {
        if (pizzaOfTheDay && pizza.id === pizzaOfTheDay.id) {
            prices[pizza.id] = Math.round(pizza.price * 0.9);
        } else {
            prices[pizza.id] = pizza.price;
        }
    }
});

// Функция для получения данных из URL
function getDataFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    const cartParam = urlParams.get('cart');
    const cart = {};
    
    if (cartParam && cartParam !== '') {
        cartParam.split(',').forEach(item => {
            const [id, quantity] = item.split(':');
            if (id && quantity) {
                cart[id] = parseInt(quantity);
            }
        });
    }
    
    return {
        cart: cart,
        name: urlParams.get('name') || '',
        email: urlParams.get('email') || ''
    };
}

// Функция для обновления счетчика корзины и ссылок
function updateCartCounter() {
    const data = getDataFromURL();
    let totalCount = 0;
    
    for (const id in data.cart) {
        totalCount += data.cart[id];
    }
    
    const cartCountElement = document.getElementById('cart-count');
    if (cartCountElement) {
        cartCountElement.textContent = totalCount;
    }
    
    // Обновляем все ссылки с параметрами
    updateAllLinks();
}

// Функция для обновления всех ссылок на странице
function updateAllLinks() {
    const urlParams = new URLSearchParams();
    const data = getDataFromURL();
    
    // Сохраняем данные в URL
    const cartParams = [];
    for (const id in data.cart) {
        if (data.cart[id] > 0) {
            cartParams.push(`${id}:${data.cart[id]}`);
        }
    }
    
    if (cartParams.length > 0) {
        urlParams.set('cart', cartParams.join(','));
    }
    
    if (data.name) urlParams.set('name', data.name);
    if (data.email) urlParams.set('email', data.email);
    
    const queryString = urlParams.toString();
    
    // Обновляем все ссылки
    document.querySelectorAll('a[href*="index.html"]').forEach(link => {
        link.href = queryString ? `index.html?${queryString}` : 'index.html';
    });
    
    document.querySelectorAll('a[href*="cart.html"]').forEach(link => {
        link.href = queryString ? `cart.html?${queryString}` : 'cart.html';
    });
    
    document.querySelectorAll('a[href*="order.html"]').forEach(link => {
        link.href = queryString ? `order.html?${queryString}` : 'order.html';
    });
    
    document.querySelectorAll('a[href*="orders.html"]').forEach(link => {
        link.href = queryString ? `orders.html?${queryString}` : 'orders.html';
    });
}

// Функция для обновления URL с данными
function updateURLWithData(data) {
    const cartParams = [];
    for (const id in data.cart) {
        if (data.cart[id] > 0) {
            cartParams.push(`${id}:${data.cart[id]}`);
        }
    }
    
    const urlParams = new URLSearchParams();
    
    if (cartParams.length > 0) {
        urlParams.set('cart', cartParams.join(','));
    }
    
    if (data.name) urlParams.set('name', data.name);
    if (data.email) urlParams.set('email', data.email);
    
    const newUrl = urlParams.toString() ? `${window.location.pathname}?${urlParams.toString()}` : window.location.pathname;
    window.history.replaceState({}, '', newUrl);
}

const notificationArea = document.getElementById('notification-area');
const menuContainer = document.getElementById('menu-container');

// Функция для создания карточек меню
function createMenuCards() {
    menuContainer.innerHTML = '';
    
    pizzaData.forEach(pizza => {
        if (pizza.available === "Y" || pizza.available === "N") {
            const isPizzaOfTheDay = pizzaOfTheDay && pizza.id === pizzaOfTheDay.id;
            const discountedPrice = isPizzaOfTheDay ? Math.round(pizza.price * 0.9) : pizza.price;
            
            const card = document.createElement('div');
            card.className = pizza.available === "Y" ? 
                (isPizzaOfTheDay ? 'card pizza-of-the-day' : 'card') : 
                'card unavailable';
            
            let priceHTML = '';
            if (isPizzaOfTheDay) {
                priceHTML = `
                    <div class="price">
                        <span class="discount-price">${discountedPrice} ₽</span>
                        <span class="original-price">${pizza.price} ₽</span>
                    </div>
                    <div class="discount-text">Скидка 10%</div>
                `;
            } else {
                priceHTML = `<div class="price">${pizza.price} ₽</div>`;
            }
            
            card.innerHTML = `
                ${isPizzaOfTheDay ? '<div class="pizza-of-the-day-badge">Пицца дня!</div>' : ''}
                <h3 class="pizza-name">${pizza.name}${isPizzaOfTheDay ? ' (пицца дня)' : ''}</h3>
                <p class="pizza-description">${pizza.description}${isPizzaOfTheDay ? ' Скидка 10%' : ''}</p>
                ${priceHTML}
                <button class="btn add-to-cart-btn" data-id="${pizza.id}" ${pizza.available === "N" ? 'disabled' : ''}>
                    ${pizza.available === "Y" ? 'Добавить' : 'Не доступно'}
                </button>
            `;
            menuContainer.appendChild(card);
        }
    });

    // Добавляем обработчики событий для кнопок "Добавить"
    document.querySelectorAll('.add-to-cart-btn:not([disabled])').forEach(btn => {
        btn.addEventListener('click', function() {
            const pizzaId = this.getAttribute('data-id');
            const pizza = pizzaData.find(p => p.id == pizzaId);
            
            if (!pizza) return;
            
            // Получаем текущие данные из URL
            const data = getDataFromURL();
            
            // Добавляем товар в корзину
            data.cart[pizzaId] = (data.cart[pizzaId] || 0) + 1;
            
            // Формируем новый URL с обновленными данными
            updateURLWithData(data);
            
            // Обновляем счетчик корзины и ссылки
            updateCartCounter();
            
            showNotification(`Добавлено: ${pizza.name}`, 'info');
        });
    });
}

// Инициализация страницы
document.addEventListener('DOMContentLoaded', function() {
    createMenuCards();
    updateCartCounter();
    
    if (pizzaOfTheDay) {
        showNotification(`🍕 Пицца дня: ${pizzaOfTheDay.name} со скидкой 10%!`, 'info');
    }
});

// Показать временное сообщение
function showNotification(text, type = 'info') {
    if (!notificationArea) return;
    
    notificationArea.innerHTML = '';
    const notification = document.createElement('div');
    notification.className = `notification ${type}-notification`;
    notification.textContent = text;
    notificationArea.appendChild(notification);
}

Содержимое файла: v08\style.css
--------------------------------------------------
body {
    font-family: Arial, sans-serif;
    padding: 20px;
    background-color: #f5f5f5;
    max-width: 1000px;
    margin: 0 auto;
}
h1, h2 {
    color: #2c3e50;
    text-align: center;
}
.container {
    display: flex;
    flex-wrap: wrap;
    gap: 15px;
    margin: 20px 0;
    justify-content: center;
}
.card {
    background: white;
    border-radius: 8px;
    padding: 15px;
    width: 220px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    position: relative;
}
.btn {
    background: #3498db;
    color: white;
    border: none;
    padding: 8px 12px;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 10px;
    width: 100%;
}
.btn:hover {
    background: #2980b9;
}
.notification-area {
    height: 60px;
    margin: 20px 0;
    padding: 10px;
    background: white;
    border-radius: 4px;
    box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    overflow: hidden;
}
.notification {
    padding: 10px;
    border-radius: 4px;
    margin-bottom: 5px;
}
.info-notification {
    background: #e8f5e9;
    color: #2e7d32;
}
.error-notification {
    background: #ffebee;
    color: #c62828;
}
.cart {
    background: white;
    border-radius: 8px;
    padding: 20px;
    margin-top: 30px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.cart-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 0;
    border-bottom: 1px solid #eee;
}
.cart-controls {
    display: flex;
    align-items: center;
    gap: 10px;
}
.quantity-btn {
    width: 25px;
    height: 25px;
    border-radius: 50%;
    border: none;
    background: #f0f0f0;
    cursor: pointer;
    font-weight: bold;
}
.quantity-btn:hover {
    background: #e0e0e0;
}
.order-info {
    background: #e8f5e9;
    padding: 15px;
    border-radius: 4px;
    margin-top: 20px;
    display: none;
}
.order-form {
    margin-top: 20px;
    display: flex;
    flex-direction: column;
    gap: 15px;
}
.form-group {
    display: flex;
    flex-direction: column;
}
.form-group label {
    margin-bottom: 5px;
    font-weight: bold;
}
.form-group input {
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
}
.total-price {
    font-size: 18px;
    font-weight: bold;
    margin: 15px 0;
    text-align: right;
}
.action-buttons {
    display: flex;
    gap: 10px;
    justify-content: flex-end;
}
.order-btn {
    background: #2ecc71;
}
.order-btn:hover {
    background: #27ae60;
}
.clear-btn {
    background: #e74c3c;
}
.clear-btn:hover {
    background: #c0392b;
}
.price {
    color: #e74c3c;
    font-weight: bold;
    margin: 5px 0;
}
.unavailable {
    opacity: 0.6;
    position: relative;
}
.unavailable::after {
    content: "Нет в наличии";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) rotate(-15deg);
    background: rgba(231, 76, 60, 0.9);
    color: white;
    padding: 5px 10px;
    border-radius: 4px;
    font-weight: bold;
    font-size: 14px;
}
.pizza-of-the-day {
    border: 2px solid #f39c12;
    background: linear-gradient(135deg, #fffaf0, #fff5e6);
}
.pizza-of-the-day-badge {
    position: absolute;
    top: -10px;
    right: -10px;
    background: #f39c12;
    color: white;
    padding: 5px 10px;
    border-radius: 20px;
    font-weight: bold;
    font-size: 12px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.2);
}
.discount-price {
    color: #e74c3c;
    font-weight: bold;
}
.original-price {
    text-decoration: line-through;
    color: #999;
    font-size: 14px;
    margin-left: 5px;
}
.discount-text {
    color: #27ae60;
    font-weight: bold;
    font-size: 14px;
    margin-top: 5px;
}

.cart-icon {
    position: relative;
    font-size: 24px;
    padding: 10px;
    background: #3498db;
    color: white;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.cart-icon:hover {
    background: #2980b9;
}

#cart-count {
    position: absolute;
    top: -5px;
    right: -5px;
    background: #e74c3c;
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    font-size: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
}

/* Добавим в конец файла style.css */

.order-item {
    background: #f9f9f9;
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 15px;
    border-left: 4px solid #3498db;
}

.order-item h3 {
    margin-top: 0;
    color: #2c3e50;
}

.cancel-order-btn {
    background: #e74c3c;
    margin-top: 10px;
}

.cancel-order-btn:hover {
    background: #c0392b;
}

.orders-link {
    background: #9b59b6;
    text-decoration: none;
    padding: 8px 12px;
    border-radius: 4px;
    color: white;
    margin-left: 10px;
}

.orders-link:hover {
    background: #8e44ad;
}

/* Добавим в конец файла style.css */

.header-nav {
    display: flex;
    gap: 10px;
    align-items: center;
    margin-bottom: 15px;
}

.header-nav a {
    text-decoration: none;
    padding: 8px 12px;
    border-radius: 4px;
    color: white;
    font-size: 14px;
}

.header-nav .orders-link {
    background: #9b59b6;
}

.header-nav .orders-link:hover {
    background: #8e44ad;
}

.header-nav .cart-link {
    background: #3498db;
    position: relative;
    padding: 8px 12px 8px 35px;
}

.header-nav .cart-link:hover {
    background: #2980b9;
}

.header-nav .cart-link::before {
    content: "🛒";
    position: absolute;
    left: 10px;
    top: 50%;
    transform: translateY(-50%);
}

.header-nav .btn-link {
    background: #3498db;
}

.header-nav .btn-link:hover {
    background: #2980b9;
}

.order-item {
    background: #f9f9f9;
    padding: 15px;
    border-radius: 8px;
    margin-bottom: 15px;
    border-left: 4px solid #3498db;
}

.order-item h3 {
    margin-top: 0;
    color: #2c3e50;
}

.cancel-order-btn {
    background: #e74c3c;
    margin-top: 10px;
}

.cancel-order-btn:hover {
    background: #c0392b;
}
.header-nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.nav-left, .nav-right {
    display: flex;
    gap: 10px;
    align-items: center;
}

.header-nav a {
    text-decoration: none;
    padding: 8px 12px;
    border-radius: 4px;
    color: white;
    font-size: 14px;
}

.header-nav .orders-link {
    background: #9b59b6;
}

.header-nav .orders-link:hover {
    background: #8e44ad;
}

.header-nav .cart-link {
    background: #3498db;
    position: relative;
    padding: 8px 12px 8px 35px;
}

.header-nav .cart-link:hover {
    background: #2980b9;
}

.header-nav .cart-link::before {
    content: "🛒";
    position: absolute;
    left: 10px;
    top: 50%;
    transform: translateY(-50%);
}

.header-nav .btn-link {
    background: #3498db;
}

.header-nav .btn-link:hover {
    background: #2980b9;
}

