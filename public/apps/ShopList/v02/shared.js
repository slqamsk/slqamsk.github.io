/**
 * ShopList ‚Äî shared.js
 * –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –º–µ–Ω—é, API, –æ—à–∏–±–∫–∏, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
 */

// === –£—Ç–∏–ª–∏—Ç—ã ===

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ URL
 */
function getUrlParam(name) {
  const urlParams = new URLSearchParams(window.location.search);
  return urlParams.get(name);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ URL –±—ç–∫–µ–Ω–¥–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ appUrl
 */
function getBackendUrl() {
  const appUrl = getUrlParam('appUrl');
  return appUrl ? appUrl.trim() : null;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –±—ç–∫–µ–Ω–¥
 */
async function testBackendConnection(appUrl) {
  try {
    const url = new URL(appUrl);
    url.searchParams.append('action', 'getProducts');

    const response = await fetch(url, { method: 'GET' });
    const text = await response.text();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç JSON
    if (response.headers.get('Content-Type')?.includes('json')) {
      let data;
      try {
        data = JSON.parse(text);
      } catch (e) {
        throw new Error(`Invalid JSON: ${text.substring(0, 100)}...`);
      }

      if (data.error) {
        throw new Error(data.error);
      }
      
      return { success: true, message: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' };
    } 
    // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ JSON (–Ω–∞–ø—Ä–∏–º–µ—Ä, HTML –ø—Ä–∏ –æ—à–∏–±–∫–µ GAS)
    else {
      throw new Error('Server returned non-JSON response');
    }
  } catch (error) {
    return { success: false, message: '–ù–µ—Ç —Å–≤—è–∑–∏ —Å –±—ç–∫–µ–Ω–¥–æ–º: ' + error.message };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ appUrl –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç
 */
async function ensureAppUrl() {
  const appUrl = getBackendUrl();
  const currentPage = window.location.pathname.split('/').pop();
  const errorLog = document.getElementById('error-log');

  if (!errorLog) return;

  // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ index.html, –µ—Å–ª–∏ –Ω–µ—Ç appUrl –∏ –Ω–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π
  if (!appUrl && currentPage !== 'index.html') {
    window.location.href = 'index.html';
    return;
  }

  if (currentPage === 'index.html') {
    if (!appUrl) {
      errorLog.innerHTML = `
        <strong>‚ö†Ô∏è –ë—ç–∫–µ–Ω–¥ –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω</strong><br>
        –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:
        <ol>
          <li>–û—Ç–∫—Ä–æ–π—Ç–µ <a href="https://docs.google.com/spreadsheets/d/1eW5_4F_4uj4r3tu7mbqrSOA4yafD-GvHEVUyMbkpJKk" target="_blank">Google –¢–∞–±–ª–∏—Ü—É –ø—Ä–æ–µ–∫—Ç–∞</a></li>
          <li>–í –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ <strong>–ú–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Üí –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π URL</strong></li>
          <li>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –¥–∏–∞–ª–æ–≥–∞</li>
        </ol>
        –ò–ª–∏ –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä:<br>
        <code style="background: #f0f0f0; padding: 2px 4px;">?appUrl=https://script.google.com/macros/s/YOUR-DEPLOYMENT-ID/exec</code>
      `;
      errorLog.style.background = '#fff3cd';
      errorLog.style.borderColor = '#ffeaa7';
      errorLog.style.color = '#856404';
    } else {
      errorLog.innerHTML = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—ç–∫–µ–Ω–¥—É...';
      errorLog.style.background = '#d1ecf1';
      errorLog.style.borderColor = '#bee5eb';
      errorLog.style.color = '#0c5460';

      const result = await testBackendConnection(appUrl);

      if (result.success) {
        errorLog.innerHTML = `
          <strong>‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—ç–∫–µ–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</strong><br>
          URL: <code style="font-size: 12px; background: #cceeff;">${appUrl}</code>
        `;
        errorLog.style.background = '#d4edda';
        errorLog.style.borderColor = '#c3e6cb';
        errorLog.style.color = '#155724';
      } else {
        errorLog.innerHTML = `
          <strong>‚ùå –ù–µ—Ç —Å–≤—è–∑–∏ —Å –±—ç–∫–µ–Ω–¥–æ–º</strong><br>
          ${result.message}<br>
          –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL –≤–µ—Ä–Ω—ã–π –∏ GAS —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –∫–∞–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
        `;
        errorLog.style.background = '#f8d7da';
        errorLog.style.borderColor = '#f5c6cb';
        errorLog.style.color = '#721c24';
      }
    }
  }
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 */
async function apiRequest(action, method = 'GET', body = null) {
  const appUrl = getBackendUrl();
  if (!appUrl) {
    logError('apiRequest: –Ω–µ –∑–∞–¥–∞–Ω appUrl –≤ URL');
    return null;
  }

  let url;
  try {
    url = new URL(appUrl);
    url.searchParams.append('action', action);
    logError(`apiRequest: —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL ‚Äî ${url.toString()}`);
  } catch (e) {
    logError(`apiRequest: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è URL –∏–∑ '${appUrl}' ‚Äî ${e.message}`);
    return null;
  }

  // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: Content-Type —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ç–µ–ª–æ–º
  const config = {
    method,
    headers: {}
  };

  // –î–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ —Å —Ç–µ–ª–æ–º
  if (method.toUpperCase() !== 'GET' && method.toUpperCase() !== 'HEAD') {
    config.headers['Content-Type'] = 'application/json';
    if (body) {
      try {
        config.body = JSON.stringify(body);
        logError(`apiRequest: —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ ‚Äî ${config.body}`);
      } catch (e) {
        logError(`apiRequest: –æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–ª–∞ ‚Äî ${e.message}`);
        return null;
      }
    }
  }

  try {
    logError(`apiRequest: –æ—Ç–ø—Ä–∞–≤–∫–∞ ${method} –∑–∞–ø—Ä–æ—Å–∞ –∫ ${url}...`);
    const response = await fetch(url, config);

    logError(`apiRequest: –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç ‚Äî —Å—Ç–∞—Ç—É—Å ${response.status} (${response.statusText})`);

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = {};
    for (const [key, value] of response.headers) {
      headers[key] = value;
    }
    logError(`apiRequest: –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ ‚Äî ${JSON.stringify(headers)}`);

    const text = await response.text();
    logError(`apiRequest: —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤): ${text.substring(0, 200)}${text.length > 200 ? '...' : ''}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç JSON
    if (response.headers.get('Content-Type')?.includes('json')) {
      try {
        const data = JSON.parse(text);
        logError(`apiRequest: JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω`);
        
        if (data.error) {
          logError(`apiRequest: —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É ‚Äî ${data.error}`);
          throw new Error(data.error);
        }
        
        logError(`apiRequest: ‚úÖ –£—Å–ø–µ—à–Ω–æ: –¥–µ–π—Å—Ç–≤–∏–µ '${action}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
        return data;
      } catch (e) {
        logError(`apiRequest: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON ‚Äî ${e.message}`);
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–π JSON
        try {
          const partialData = JSON.parse(text);
          if (partialData.error) {
            throw new Error(partialData.error);
          }
          logError(`apiRequest: —á–∞—Å—Ç–∏—á–Ω—ã–π JSON —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
          return partialData;
        } catch (e2) {
          // –ï—Å–ª–∏ –∏ —á–∞—Å—Ç–∏—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
          if (method.toUpperCase() === 'POST') {
            logError(`apiRequest: POST-–∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ JSON-–æ—Ç–≤–µ—Ç–∞)`);
            return { success: true };
          }
          throw new Error(`Invalid JSON response: ${text.substring(0, 100)}...`);
        }
      }
    } 
    // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ JSON (–Ω–∞–ø—Ä–∏–º–µ—Ä, HTML –ø—Ä–∏ –æ—à–∏–±–∫–µ GAS)
    else {
      logError(`apiRequest: –æ—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON`);
      
      // –ï—Å–ª–∏ —ç—Ç–æ HTML-–æ—à–∏–±–∫–∞ GAS
      if (text.includes('<html>') || text.includes('<!DOCTYPE html>')) {
        logError(`apiRequest: –ø–æ–ª—É—á–µ–Ω HTML-–æ—Ç–≤–µ—Ç (–æ—à–∏–±–∫–∞ GAS)`);
        
        // –î–ª—è POST-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        if (method.toUpperCase() === 'POST') {
          logError(`apiRequest: POST-–∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–æ—à–∏–±–∫–∞ GAS, –Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)`);
          return { success: true };
        }
        
        throw new Error('Server returned HTML error page');
      }
      
      // –î–ª—è POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ JSON-–æ—Ç–≤–µ—Ç–∞ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
      if (method.toUpperCase() === 'POST') {
        logError(`apiRequest: POST-–∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–±–µ–∑ JSON-–æ—Ç–≤–µ—Ç–∞)`);
        return { success: true };
      }
      
      return { success: true };
    }
  } catch (error) {
    if (error.name === 'TypeError' && error.message.includes('fetch')) {
      logError(`apiRequest: üî¥ –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ ‚Äî 'Failed to fetch'`);
      logError(`  - –ü—Ä–æ–≤–µ—Ä—å, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ URL: ${appUrl}`);
      logError(`  - –£–±–µ–¥–∏—Å—å, —á—Ç–æ GAS —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –∫–∞–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`);
      logError(`  - –ü—Ä–æ–≤–µ—Ä—å –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ CORS-–æ—à–∏–±–æ–∫`);
    } else {
      logError(`apiRequest: –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ '${action}': ${error.message}`);
    }
    
    // –î–ª—è POST-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    if (method.toUpperCase() === 'POST' && error.message.includes('Failed to fetch')) {
      logError('apiRequest: POST-–∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–æ—à–∏–±–∫–∞ —Å–µ—Ç–∏, –Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)');
      return { success: true };
    }
    
    return null;
  }
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ #error-log
 */
function logError(message) {
  const errorLog = document.getElementById('error-log');
  if (errorLog) {
    const now = new Date().toLocaleTimeString('ru-RU');
    const entry = document.createElement('div');
    entry.style.fontSize = '12px';
    entry.style.color = '#721c24';
    entry.style.margin = '4px 0';
    entry.style.padding = '4px 0';
    entry.textContent = `[${now}] ${message}`;
    errorLog.appendChild(entry);
  }
}

/**
 * –í—Å—Ç–∞–≤–∫–∞ –æ–±—â–µ–≥–æ –º–µ–Ω—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º appUrl
 */
function insertMainMenu() {
  const appUrl = getBackendUrl();
  const currentPath = window.location.pathname.split('/').pop();

  function createLink(href, text) {
    if (!appUrl) return `<a href="${href}">${text}</a>`;
    const url = new URL(href, window.location.href);
    url.searchParams.set('appUrl', appUrl);
    if (currentPath === href) return text;
    return `<a href="${url}">${text}</a>`;
  }

  const menuHtml = `
    <nav id="main-menu" style="margin-bottom: 20px; padding: 10px 0; border-bottom: 1px solid #ddd;">
      ${createLink('index.html', '–ì–ª–∞–≤–Ω–∞—è')} |
      ${createLink('products.html', '–û–±—â–∏–π —Å–ø–∏—Å–æ–∫')} |
      ${createLink('shopping-list.html', '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫')} |
      ${createLink('add-product.html', '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç')}
    </nav>
  `;

  const container = document.createElement('div');
  container.innerHTML = menuHtml;

  const header = document.querySelector('header') || document.body;
  header.insertBefore(container.firstElementChild, header.firstChild);
}

// === –°—Ç—Ä–∞–Ω–∏—Ü–∞: products.html ===
async function initProductsPage() {
  const productsList = document.getElementById('products-list');
  const viewAllBtn = document.getElementById('view-all');
  const viewNotInListBtn = document.getElementById('view-not-in-list');

  if (!productsList) {
    logError('initProductsPage: —ç–ª–µ–º–µ–Ω—Ç #products-list –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  let products = [];
  let shoppingList = [];
  let currentView = 'all';

  async function loadData() {
    logError('initProductsPage: –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
    products = await apiRequest('getProducts') || [];
    shoppingList = await apiRequest('getShoppingList') || [];
    renderList();
  }

  function isInShoppingList(productId) {
    return shoppingList.some(item => item.productId == productId);
  }

  function getFilteredProducts() {
    if (currentView === 'all') {
      return products;
    } else {
      return products.filter(p => !isInShoppingList(p.id));
    }
  }

  function renderList() {
    productsList.innerHTML = '';
    const filtered = getFilteredProducts();

    if (filtered.length === 0) {
      productsList.innerHTML = '<li>–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤</li>';
      return;
    }

    filtered.forEach(product => {
      const li = document.createElement('li');
      li.innerHTML = `
        ${product.name}
        <button data-id="${product.id}" class="add-to-shopping-list">–î–æ–±–∞–≤–∏—Ç—å</button>
      `;
      productsList.appendChild(li);
    });

    document.querySelectorAll('.add-to-shopping-list').forEach(button => {
      button.addEventListener('click', async (e) => {
        const productId = parseInt(e.target.dataset.id);
        const product = products.find(p => p.id === productId);
        if (!product) {
          logError(`initProductsPage: –ø—Ä–æ–¥—É–∫—Ç —Å ID=${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          return;
        }

        logError(`initProductsPage: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ ${productId} ‚Äî ${product.name}`);
        const result = await apiRequest('addToShoppingList', 'POST', {
          productId: product.id,
          productName: product.name
        });

        if (result && result.success) {
          logError(`initProductsPage: –ø—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫`);
          if (currentView === 'not-in-list') {
            e.target.closest('li').remove();
            logError(`initProductsPage: —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω –∏–∑ DOM (—Ä–µ–∂–∏–º "–ù–µ –≤ —Å–ø–∏—Å–∫–µ")`);
          }
          shoppingList.push({
            productId: product.id,
            productName: product.name,
            quantity: '',
            status: 'pending'
          });
        } else {
          logError(`initProductsPage: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞`);
        }
      });
    });
  }

  viewAllBtn?.addEventListener('click', () => {
    currentView = 'all';
    viewAllBtn.classList.add('primary');
    viewNotInListBtn.classList.remove('primary');
    logError('initProductsPage: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ "–í—Å–µ"');
    renderList();
  });

  viewNotInListBtn?.addEventListener('click', () => {
    currentView = 'not-in-list';
    viewAllBtn.classList.remove('primary');
    viewNotInListBtn.classList.add('primary');
    logError('initProductsPage: –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ "–ù–µ –≤ —Å–ø–∏—Å–∫–µ"');
    renderList();
  });

  await loadData();
  viewAllBtn?.classList.add('primary');
}

// === –°—Ç—Ä–∞–Ω–∏—Ü–∞: shopping-list.html ===
async function initShoppingListPage() {
  const shoppingListElement = document.getElementById('shopping-list');
  const clearAllBtn = document.getElementById('clear-all');
  const clearBoughtBtn = document.getElementById('clear-bought');

  if (!shoppingListElement) {
    logError('initShoppingListPage: —ç–ª–µ–º–µ–Ω—Ç #shopping-list –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  let shoppingList = [];

  async function loadData() {
    shoppingList = await apiRequest('getShoppingList') || [];
    renderList();
  }

  function renderList() {
    shoppingListElement.innerHTML = '';
    
    if (shoppingList.length === 0) {
      shoppingListElement.innerHTML = '<li>–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç</li>';
      return;
    }

    shoppingList.forEach(item => {
      const li = document.createElement('li');
      li.innerHTML = `
        <input type="text" class="quantity" value="${item.quantity || ''}" placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ" data-id="${item.productId}">
        ${item.productName}
        <button data-id="${item.productId}" class="status bought">–ö—É–ø–∏–ª</button>
        <button data-id="${item.productId}" class="status not-available">–ù–µ –±—ã–ª–æ</button>
      `;
      shoppingListElement.appendChild(li);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª–µ–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    document.querySelectorAll('.quantity').forEach(input => {
      input.addEventListener('blur', async (e) => {
        const productId = parseInt(e.target.dataset.id);
        const quantity = e.target.value.trim();
        
        await apiRequest('updateQuantity', 'POST', {
          productId,
          quantity
        });
      });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç—É—Å–∞
    document.querySelectorAll('.status').forEach(button => {
      button.addEventListener('click', async (e) => {
        const productId = parseInt(e.target.dataset.id);
        const status = e.target.classList.contains('bought') ? 'bought' : 'not_available';
        
        const result = await apiRequest('updateStatus', 'POST', {
          productId,
          status
        });
        
        if (result && result.success) {
          location.reload();
        }
      });
    });
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –≤—Å—ë"
  clearAllBtn?.addEventListener('click', async () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫?')) {
      await apiRequest('clearShoppingList', 'POST');
      location.reload();
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ"
  clearBoughtBtn?.addEventListener('click', async () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã?')) {
      await apiRequest('clearBought', 'POST');
      location.reload();
    }
  });

  await loadData();
}

// === –°—Ç—Ä–∞–Ω–∏—Ü–∞: add-product.html ===
async function initAddProductPage() {
  const productNameInput = document.getElementById('product-name');
  const saveBtn = document.getElementById('save-product');
  const cancelBtn = document.getElementById('cancel');
  const deleteBtn = document.getElementById('delete-product');

  if (!productNameInput || !saveBtn || !cancelBtn) {
    logError('initAddProductPage: –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }

  let isEditMode = false;
  let currentProductId = null;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const urlParams = new URLSearchParams(window.location.search);
  const editId = urlParams.get('edit');
  
  if (editId) {
    isEditMode = true;
    currentProductId = parseInt(editId);
    logError(`initAddProductPage: —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, ID=${currentProductId}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const product = await apiRequest('getProducts');
    const targetProduct = product.find(p => p.id == currentProductId);
    
    if (targetProduct) {
      productNameInput.value = targetProduct.name;
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      if (deleteBtn) {
        deleteBtn.style.display = 'inline-block';
      }
    } else {
      logError(`initAddProductPage: –ø—Ä–æ–¥—É–∫—Ç —Å ID=${currentProductId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      alert('–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
      window.location.href = 'products.html';
      return;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  saveBtn.addEventListener('click', async () => {
    const name = productNameInput.value.trim();
    if (!name) {
      alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞');
      return;
    }

    if (isEditMode) {
      // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const result = await apiRequest('updateProduct', 'POST', {
        id: currentProductId,
        name: name
      });
      
      if (result && result.success) {
        logError(`initAddProductPage: –ø—Ä–æ–¥—É–∫—Ç ID=${currentProductId} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω`);
        window.location.href = 'products.html';
      }
    } else {
      // –†–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
      const result = await apiRequest('addProduct', 'POST', {
        name: name
      });
      
      if (result && result.success) {
        logError('initAddProductPage: –ø—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
        window.location.href = 'products.html';
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
  cancelBtn.addEventListener('click', () => {
    window.location.href = 'products.html';
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  if (deleteBtn) {
    deleteBtn.addEventListener('click', async () => {
      if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç?')) {
        const result = await apiRequest('deleteProduct', 'POST', {
          id: currentProductId
        });
        
        if (result && result.success) {
          logError(`initAddProductPage: –ø—Ä–æ–¥—É–∫—Ç ID=${currentProductId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω`);
          window.location.href = 'products.html';
        }
      }
    });
  }
}

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM ===
document.addEventListener('DOMContentLoaded', async () => {
  logError('shared.js: DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
  insertMainMenu();
  await ensureAppUrl();

  const currentPage = window.location.pathname.split('/').pop();
  logError(`shared.js: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ‚Äî ${currentPage}`);

  if (currentPage === 'products.html') {
    logError('shared.js: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã products.html');
    await initProductsPage();
  } else if (currentPage === 'shopping-list.html') {
    logError('shared.js: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã shopping-list.html');
    await initShoppingListPage();
  } else if (currentPage === 'add-product.html') {
    logError('shared.js: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã add-product.html');
    await initAddProductPage();
  }
});