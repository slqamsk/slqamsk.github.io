ShopList Frontend Application

ОБЩЕЕ ОПИСАНИЕ:
Фронтенд для приложения "ShopList" - простого списка покупок для семьи.
Состоит из 4 HTML-страниц с общим меню и стилями.

СТРУКТУРА ПРОЕКТА:
ShopList/
├── index.html                 # Главная страница
├── products.html              # Общий список продуктов
├── shopping-list.html         # Список покупок
├── add-product.html           # Добавление/редактирование продукта
├── style.css                  # Общие стили
├── modules/                   # Директория с JavaScript-модулями
│   ├── api.js                # Модуль для работы с API (экспортирует API-функции)
│   ├── router.js             # Модуль для работы с URL и редиректами
│   ├── ui.js                 # Модуль для уведомлений и индикаторов загрузки
│   ├── validator.js          # Модуль валидации данных
│   ├── products-page.js      # Логика страницы продуктов (экспортирует функцию init)
│   ├── shopping-list-page.js # Логика страницы списка покупок (экспортирует функцию init)
│   ├── add-product-page.js   # Логика страницы добавления продукта (экспортирует функцию init)
│   └── index-page.js         # Логика главной страницы (экспортирует функцию init)
└── main.js                   # Основной файл инициализации (импортирует необходимые модули)

ТРЕБОВАНИЯ К ФУНКЦИОНАЛУ:

1. Обработка appUrl
   - appUrl должен браться из параметра URL: ?appUrl=https://script.google.com/macros/s/AKfycbyg1ezxpOvDvyTgOkKzL-S_3_uUUxmWTH8za8mqAQjNlJKpkIPLJRB3rKPcj9pPk0RO/exec
   - Если параметр отсутствует:
       - На всех страницах (кроме index.html) - редирект на index.html
       - На index.html - отображение инструкции по развёртыванию бэкенда
   - Параметр appUrl должен сохраняться при всех переходах между страницами

2. Меню
   - Общее меню должно отображаться в хедере на всех страницах
   - Ссылки в меню должны сохранять параметр appUrl при переходах
   - Пункты меню: Главная | Общий список | Список покупок | Добавить продукт

3. Обработка ошибок и уведомлений
   - Все ошибки и уведомления выводятся в элемент с id="message-log"
   - Формат ошибок: [HH:MM:SS] Текст ошибки
   - Ошибки накапливаются (не перезаписываются)
   - Показывать сообщения об успешных операциях
		Сообщения об успешном выполнении операции должны выводиться в тот же элемент (#message-log), что и ошибки. 
		Для визуального отличия сообщениям об успехе должен присваиваться CSS-класс (например, .success), 
		а сообщениям об ошибках - другой CSS-класс (например, .error).
		Сообщения не скрываются автоматически и остаются visible до тех пор, пока пользователь не обновит страницу.
		Формат сообщения: [HH:MM:SS] Операция успешно завершена: [Название операции].
   - Для index.html: если appUrl есть, показывать статус подключения к бэкенду
   - Обрабатывать случаи, когда API возвращает HTML вместо JSON (проверять Content-Type)
   - Извлекать текст ошибки из HTML ответов при необходимости
   - При невозможности выполнить запрос к API из-за отсутствия сетевого соединения (offline), 
		ошибка должна быть обработана так же, как и любая другая ошибка API. 
		Сообщение об ошибке должно быть понятным для пользователя: [HH:MM:SS] 
		Ошибка сети: отсутствует соединение с интернетом или бэкендом. Проверьте подключение.

4. Индикаторы загрузки
   - Показывать индикатор загрузки при всех API запросах
   - Индикатор загрузки не должен использовать overlay. 
   Вместо этого, на время выполнения любого API-запроса всем интерактивным элементам интерфейса 
   (кнопкам, полям ввода, ссылкам) должен добавляться атрибут disabled, чтобы заблокировать взаимодействие. 
   Одновременно с этим должен отображаться элемент, визуально показывающий состояние загрузки 
   (например, вращающийся кружок или анимированная полоса). Индикатор должен быть виден пользователю. 
   CSS-анимации остаются обязательным требованием.
   - Использовать CSS-анимации для плавного отображения/скрытия индикаторов
   - Индикаторы должны быть на всех страницах для всех операци
   Точное расположение и визуальное представление индикатора загрузки остаётся на усмотрение разработчика

5. Архитектура для тестирования
   - Бизнес-логика должна быть отделена от DOM-манипуляций
   - API-функции должны быть вынесены в отдельный модуль
   - Использовать модульный подход для возможности unit-тестирования
   - Минимизировать глобальные зависимости

6. Инструкция по развёртыванию (для index.html)
   - Должна отображаться когда appUrl отсутствует
   - Текст инструкции:

     "Ошибка: не подключен бэкенд.
     Чтобы начать работу, подключите бэкенд:

     1. Откройте Google Таблицу с шаблоном проекта:
        https://docs.google.com/spreadsheets/d/1eW5_4F_4uj4r3tu7mbqrSOA4yafD-GvHEVUyMbkpJKk

     2. Откройте меню 'Инструменты' → 'Редактор скриптов'

     3. В редакторе скриптов выберите 'Публикация' → 'Развернуть как веб-приложение'

     4. Настройка развертывания:
        - В разделе 'Проект версии' выберите 'Новая версия'
        - В поле 'Описание' укажите 'Первая версия'
        - В разделе 'Выполнять как' выберите 'Ваш аккаунт'
        - В разделе 'Кто имеет доступ к приложению' выберите 'Любой, у кого есть ссылка'
        - Нажмите 'Развернуть'

     5. Подтвердите разрешения (если запросят)

     6. Скопируйте полученный URL развертывания (начинается с https://script.google.com/macros/s/...)

     7. ВАЖНЫЙ ШАГ: Обновите глобальную константу в коде
        - В редакторе скриптов найдите строку: const DEPLOYMENT_URL = '...';
        - Замените значение на скопированный URL
        - Сохраните изменения (Ctrl+S или меню Файл → Сохранить)

     8. В Google Таблице откройте меню 'Меню приложения' → 'Показать мой URL'

     9. Перейдите по ссылке из диалогового окна
        ИЛИ
        Вручную добавьте параметр к URL страницы:
        ?appUrl=СКОПИРОВАННЫЙ_URL_РАЗВЕРТЫВАНИЯ

     ВАЖНО: URL развертывания имеет вид:
     https://script.google.com/macros/s/ABCDEFG1234567890/exec
     (замените YOUR-DEPLOYMENT-ID на ваш реальный идентификатор)"

7. Страницы и их функционал:

   index.html (Главная)
   - Если нет appUrl: отображать инструкцию по развёртыванию
   - Если есть appUrl: проверять статус подключения, скрывать инструкцию
   - Показывать индикатор загрузки при проверке статуса API

   products.html (Общий список продуктов)
   - Отображение всех продуктов из API (action=getProducts)
   - Переключатель режимов: "Все продукты" / "Не в списке покупок"
   - В режиме "Не в списке покупок" показывать только продукты, отсутствующие в shopping list
   - Сравнение продуктов по id между getProducts и getShoppingList
   - Для каждого продукта: название и кнопка "Добавить в список покупок"
   - При добавлении продукта в режиме "Не в списке" - удаление элемента из DOM
   - Кнопка "Добавить новый продукт" ведет на add-product.html с сохранением appUrl
   - Показывать индикатор загрузки при загрузке продуктов и операциях

   shopping-list.html (Список покупок)
   - Отображение списка покупок из API (action=getShoppingList)
   - Для каждого продукта: 
		Название продукта, 
		Поле ввода количества (текстовое, без валидации и без какой-либо обработки на фронтенде, включая trim), 
		Две кнопки:
			"Купил" - устанавливает статус "bought"
			"Не было" - устанавливает статус "not_available"
			Кнопки 'Купил' и 'Не было' остаются активными после нажатия 
			и могут быть использованы повторно для изменения статуса продукта. 
			При нажатии меняется только статус продукта, визуальное состояние кнопок не изменяется			
   - Поддерживаемые статусы: "pending", "bought", "not_available"
		Поведение статусов на UI:
			Продукты со статусом "bought" и "not_available" остаются видимыми в списке покупок.
			Для визуального различия продуктам со статусом "bought" должен добавляться CSS-класс (например, .bought), 
			а продуктам со статусом "not_available" - CSS-класс (например, .not-available). 
			Стили этих классов должны явно показывать состояние продукта

Это позволяет пользователю видеть историю того, что было куплено или оказалось недоступным в текущей поездке за покупками.
   - Кнопка "Удалить всё" (clearShoppingList) - удаляет весь список покупок
   - Кнопка "Удалить купленные" (clearBought) - удаляет только продукты со статусом "bought"
   - Перезагрузка всей страницы (location.reload()) требуется только в следующих случаях:
		На products.html: после добавления продукта в список покупок в общем режиме (не в режиме "Не в списке").
		На shopping-list.html: после действий clearShoppingList и clearBought.
		На add-product.html: после успешного сохранения или удаления продукта.
		Во всех остальных случаях DOM должен обновляться точечно, без перезагрузки:
		На shopping-list.html: действия updateQuantity (изменение количества) и updateStatus (изменение статуса) 
		должны обновлять только данные соответствующего продукта в интерфейсе, отправляя запрос к API и меняя состояние кнопок/поля ввода.
		На products.html: добавление продукта в список покупок в режиме "Не в списке" должно удалять карточку этого продукта из DOM.
   - Показывать индикатор загрузки при всех операциях

   add-product.html (Добавление/редактирование)
   - Поле ввода для названия продукта с валидацией:
       * Обязательное поле
       * Минимальная длина: 2 символа
       * Максимальная длина: 80 символов
       * Не может состоять только из пробелов
       * Должен содержать хотя бы один не-пробельный символ
	 Проверка на уникальность названий продуктов на фронтенде не требуется. Названия продуктов могут повторяться
   - Кнопки "Сохранить" и "Отмена"
   - При наличии параметра ?edit=ID - режим редактирования существующего продукта
   - В режиме редактирования - дополнительная кнопка "Удалить"
   - Для редактирования: получение данных продукта через getProductById
   - При конфликте редактирования (когда продукт был изменён другим пользователем или в другой вкладке): 
		последние изменения перезатирают предыдущие без дополнительного уведомления пользователя.
   - Показывать индикатор загрузки при загрузке данных продукта и операциях
   - Кнопка "Отмена" на странице add-product.html должна осуществлять переход на страницу products.html с сохранением параметра appUrl

8. API СПЕЦИФИКАЦИЯ:

   Базовый URL: из параметра appUrl
   
   GET-методы:
   - ?action=getProducts - возвращает все продукты [{"id": 1, "name": "Молоко"}, ...]
   - ?action=getShoppingList - возвращает список покупок [{"productId": 1, "productName": "Молоко", "quantity": "", "status": "pending"}, ...]
   
   POST-методы (требуют Content-Type: application/json):
   - ?action=getProductById - получает продукт по ID {"id": 1}
       Ответ: {"success": true, "product": {"id": 1, "name": "Молоко"}}
   - ?action=addProduct - добавляет продукт {"name": "Название"}
   - ?action=updateProduct - обновляет продукт {"id": 1, "name": "Новое название"}
   - ?action=deleteProduct - удаляет продукт {"id": 1}
   - ?action=addToShoppingList - добавляет в список покупок {"productId": 1, "productName": "Молоко"}
   - ?action=updateQuantity - обновляет количество {"productId": 1, "quantity": "0.5 л"}
   - ?action=updateStatus - обновляет статус {"productId": 1, "status": "bought"}
   - ?action=clearShoppingList - очищает весь список покупок
   - ?action=clearBought - удаляет только продукты со статусом "bought"

   Формат ответа:
   - Успех: {"success": true, ...}
   - Ошибка: {"success": false, "error": "Описание ошибки"}
   
   Особенности API:
   - Все ответы возвращаются с HTTP-статусом 200 (даже при ошибках)
   - При ошибке GAS может вернуть HTML вместо JSON
   - Необходимо проверять Content-Type ответа
   - При конфликте редактирования: последние изменения имеют приоритет

9. ТЕХНИЧЕСКИЕ ТРЕБОВАНИЯ:
   - Использование нативных ES6-модулей для организации кода
   - Минимальный CSS (только функциональность)
   - Правило обновления интерфейса: 
		Полная перезагрузка страницы (location.reload()) требуется только в случаях, 
		явно указанных в разделе 7 (Страницы и их функционал) для конкретных действий. 
		Во всех остальных случаях интерфейс должен обновляться точечно, без перезагрузки страницы.
   - Для добавления в список покупок в режиме "Не в списке" - удаление элемента из DOM без перезагрузки
   - XSS-безопасный вывод данных (использовать textContent, а не innerHTML)
   - Все переходы между страницами должны сохранять параметр appUrl
   - Валидация данных на фронтенде по указанным правилам
   - Обязательная обработка HTML-ответов от API при ошибках
   - Обязательное отображение индикаторов загрузки для всех API операций
   - Модульная архитектура для возможности тестирования
   - Маппинг статусов UI-API: 
       "Купил" → "bought"
       "Не было" → "not_available"
   - Основной файл main.js должен импортировать модули для каждой страницы и инициализировать соответствующий модуль при загрузке
   - В каждом HTML-файле должен быть подключен только main.js как ES6-модуль
   - Пагинация или "бесконечный скролл" реализовываться не должны. 
   Все данные, полученные от API (списки продуктов и покупок), должны отображаться на странице сразу, 
   создавая вертикальную прокрутку (scroll) в случае, если элементы не помещаются в область просмотра.
   Если полученный от API список пуст, необходимо отображать соответствующее сообщение: 
   для страницы products.html - "Список продуктов пуст", для shopping-list.html - "Список покупок пуст".